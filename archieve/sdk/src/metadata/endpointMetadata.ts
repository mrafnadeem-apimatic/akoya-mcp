/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  generateJSONSchema,
  type JSONSchema,
  Schema,
  SchemaMappedType,
  SchemaType,
  validateAndMap,
  ValidationResult,
} from '@apimatic/schema';
import { ApiResponse } from '../core.js';
import { Client } from '../client.js';
import {
  EndpointMetadataInterface,
  RequestSchemaInterface,
} from '@apimatic/metadata-interfaces';

export class EndpointMetadata<CoreReqSchema extends Schema<any, any>, Result>
  implements EndpointMetadataInterface<CoreReqSchema, Result> 
{
  constructor(
    readonly name: string,
    readonly group: string,
    readonly requestSchema: RequestSchema<CoreReqSchema>,
    readonly call: (
      client: Client,
      mappedRequest: SchemaType<CoreReqSchema>
    ) => Promise<ApiResponse<Result>>,
    readonly description?: string
  ) {}
}

export class RequestSchema<CoreReqSchema extends Schema<any, any>>
  implements RequestSchemaInterface<CoreReqSchema> 
{                
  readonly schema: CoreReqSchema;

  public toJSONSchema(): JSONSchema {
    const schema = generateJSONSchema(this.schema);
    return schema;
  }

  public validateAndMap(
    args: SchemaMappedType<CoreReqSchema>
  ): ValidationResult<SchemaType<CoreReqSchema>> {
    return validateAndMap(args, this.schema);
  }

  public constructor(schema: CoreReqSchema) {
    this.schema = schema;
  }
}