/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema.js';
import { Error, errorSchema } from './error.js';
import { Form1042SAgent, form1042SAgentSchema } from './form1042SAgent.js';
import {
  Form1042SRecipient,
  form1042SRecipientSchema,
} from './form1042SRecipient.js';
import { HateoasLink, hateoasLinkSchema } from './hateoasLink.js';
import {
  StateAndLocalTaxWithholding,
  stateAndLocalTaxWithholdingSchema,
} from './stateAndLocalTaxWithholding.js';
import {
  TaxFormAttribute,
  taxFormAttributeSchema,
} from './taxFormAttribute.js';
import { TaxParty, taxPartySchema } from './taxParty.js';
import { TypeFormType, typeFormTypeSchema } from './typeFormType.js';

/** Foreign Person's U.S. Source Income Subject to Withholding */
export interface Form1042S {
  /** Year for which taxes are being paid */
  taxYear?: number;
  /** True to indicate this is a corrected tax form */
  corrected?: boolean;
  /** Long-term persistent identity of the source account. Not the account number */
  accountId?: string;
  /** Long-term persistent id for this tax form. Depending upon the data provider, this may be the same id as the enclosing tax statement id, or this may be a different id, or this id may be omitted. */
  taxFormId?: string;
  /** Date of production or delivery of the tax form */
  taxFormDate?: string;
  /** Additional explanation text or content about this tax form */
  additionalInformation?: string;
  /** Enumerated name of the tax form entity e.g. "TaxW2" */
  taxFormType?: TypeFormType;
  /** Issuer's name, address, phone, and TIN. Issuer data need only be transmitted on enclosing TaxStatement, if it is the same on all its included tax forms. */
  issuer?: TaxParty;
  /** Recipient's name, address, phone, and TIN. Recipient data need only be transmitted on enclosing TaxStatement, if it is the same on all its included tax forms. */
  recipient?: TaxParty;
  /** Additional attributes for this tax form when defined fields are not available. Some specific additional attributes already defined by providers: Fields required by [IRS FIRE](https://www.irs.gov/e-file-providers/filing-information-returns-electronically-fire): Name Control, Type of Identification Number (EIN, SSN, ITIN, ATIN). (ATIN is tax ID number for pending adoptions.) Tax form provider field for taxpayer notification: Recipient Email Address. */
  attributes?: TaxFormAttribute[];
  /** Present if an error was encountered while retrieving this form */
  error?: Error;
  /** Links to retrieve this form as data or image, or to invoke other APIs */
  links?: HateoasLink[];
  /** Unique form identifier */
  formId?: string;
  /** Amended */
  amended?: boolean;
  /** Amendment number */
  amendmentNumber?: number;
  /** Box 1, Income code */
  incomeTypeCode?: string;
  /** Box 2, Gross income */
  grossIncome?: number;
  /** Box 3, Chapter indicator */
  chapterIndicator?: string;
  /** Box 3a, Exemption code */
  ch3ExemptionCode?: string;
  /** Box 3b, Tax rate */
  ch3TaxRate?: number;
  /** Box 4a, Exemption code */
  ch4ExemptionCode?: string;
  /** Box 4b, Tax rate */
  ch4TaxRate?: number;
  /** Box 5, Withholding allowance */
  withholdingAllowance?: number;
  /** Box 6, Net income */
  netIncome?: number;
  /** Box 7a, Federal tax withheld */
  federalTaxWithheld?: number;
  /** Box 7b, Check if federal tax withheld was not deposited with the IRS because escrow procedures were applied */
  escrowProceduresApplied?: boolean;
  /** Box 7c, Check if withholding occurred in subsequent year with respect to a partnership interest */
  subsequentYear?: boolean;
  /** Box 8, Tax withheld by other agents */
  otherAgentsTaxWithheld?: number;
  /** Box 9, Overwithheld tax repaid to recipient pursuant to adjustment procedures */
  recipientRepaidAmount?: number;
  /** Box 10, Total withholding credit */
  totalTaxWithholdingCredit?: number;
  /** Box 11, Tax paid by withholding agent (amounts not withheld) */
  withholdingAgentTaxPaid?: number;
  /** Boxes 12a-i, Withholding agent */
  withholdingAgent?: Form1042SAgent;
  /** Boxes 13a-j, 13l, Recipient for Form 1042-S */
  form1042Recipient?: Form1042SRecipient;
  /** Box 13k, Recipient account number */
  accountNumber?: string;
  /** Boxes 14a-b, Primary Withholding Agent */
  primary?: Form1042SAgent;
  /** Box 15, Check if pro-rata basis reporting */
  prorataBasisReporting?: boolean;
  /** Boxes 15a-i, Intermediary or flow thru entity */
  intermediary?: Form1042SAgent;
  /** Boxes 16a-e, Payer */
  payer?: Form1042SAgent;
  /** Box 17, State and Local tax withholding */
  stateAndLocal?: StateAndLocalTaxWithholding;
  additionalProperties?: Record<string, unknown>;
}

export const form1042SSchema: Schema<Form1042S> = typedExpandoObject(
  {
    taxYear: ['taxYear', optional(number())],
    corrected: ['corrected', optional(boolean())],
    accountId: ['accountId', optional(string())],
    taxFormId: ['taxFormId', optional(string())],
    taxFormDate: ['taxFormDate', optional(string())],
    additionalInformation: ['additionalInformation', optional(string())],
    taxFormType: ['taxFormType', optional(typeFormTypeSchema)],
    issuer: ['issuer', optional(lazy(() => taxPartySchema))],
    recipient: ['recipient', optional(lazy(() => taxPartySchema))],
    attributes: [
      'attributes',
      optional(array(lazy(() => taxFormAttributeSchema))),
    ],
    error: ['error', optional(lazy(() => errorSchema))],
    links: ['links', optional(array(lazy(() => hateoasLinkSchema)))],
    formId: ['formId', optional(string())],
    amended: ['amended', optional(boolean())],
    amendmentNumber: ['amendmentNumber', optional(number())],
    incomeTypeCode: ['incomeTypeCode', optional(string())],
    grossIncome: ['grossIncome', optional(number())],
    chapterIndicator: ['chapterIndicator', optional(string())],
    ch3ExemptionCode: ['ch3ExemptionCode', optional(string())],
    ch3TaxRate: ['ch3TaxRate', optional(number())],
    ch4ExemptionCode: ['ch4ExemptionCode', optional(string())],
    ch4TaxRate: ['ch4TaxRate', optional(number())],
    withholdingAllowance: ['withholdingAllowance', optional(number())],
    netIncome: ['netIncome', optional(number())],
    federalTaxWithheld: ['federalTaxWithheld', optional(number())],
    escrowProceduresApplied: ['escrowProceduresApplied', optional(boolean())],
    subsequentYear: ['subsequentYear', optional(boolean())],
    otherAgentsTaxWithheld: ['otherAgentsTaxWithheld', optional(number())],
    recipientRepaidAmount: ['recipientRepaidAmount', optional(number())],
    totalTaxWithholdingCredit: [
      'totalTaxWithholdingCredit',
      optional(number()),
    ],
    withholdingAgentTaxPaid: ['withholdingAgentTaxPaid', optional(number())],
    withholdingAgent: [
      'withholdingAgent',
      optional(lazy(() => form1042SAgentSchema)),
    ],
    form1042Recipient: [
      'form1042Recipient',
      optional(lazy(() => form1042SRecipientSchema)),
    ],
    accountNumber: ['accountNumber', optional(string())],
    primary: ['primary', optional(lazy(() => form1042SAgentSchema))],
    prorataBasisReporting: ['prorataBasisReporting', optional(boolean())],
    intermediary: ['intermediary', optional(lazy(() => form1042SAgentSchema))],
    payer: ['payer', optional(lazy(() => form1042SAgentSchema))],
    stateAndLocal: [
      'stateAndLocal',
      optional(lazy(() => stateAndLocalTaxWithholdingSchema)),
    ],
  },
  'additionalProperties',
  optional(unknown())
);
