/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema.js';
import { CodeAndAmount, codeAndAmountSchema } from './codeAndAmount.js';
import {
  ExpiredOptionType,
  expiredOptionTypeSchema,
} from './expiredOptionType.js';
import {
  InvestmentSaleType,
  investmentSaleTypeSchema,
} from './investmentSaleType.js';
import {
  SaleProceedsType,
  saleProceedsTypeSchema,
} from './saleProceedsType.js';
import { SaleTermType, saleTermTypeSchema } from './saleTermType.js';
import {
  StateAndLocalTaxWithholding,
  stateAndLocalTaxWithholdingSchema,
} from './stateAndLocalTaxWithholding.js';

/** Tax information for a single security transaction */
export interface SecurityDetailIrsForm1099B {
  /** Applicable checkbox on Form 8949 */
  checkboxOnForm8949?: string;
  /** Security name */
  securityName?: string;
  /** Number of shares */
  numberOfShares?: number;
  /** Box 1a, Description of property */
  saleDescription?: string;
  /** Box 1b, Date acquired */
  dateAcquired?: string;
  /** Box 1b, Date acquired Various */
  variousDatesAcquired?: boolean;
  /** Box 1c, Date sold or disposed */
  dateOfSale?: string;
  /** Box 1d, Proceeds (not price per share) */
  salesPrice?: number;
  /** Box 1f, Accrued market discount */
  accruedMarketDiscount?: number;
  /** Other adjustments (code and amount) */
  adjustmentCodes?: CodeAndAmount[];
  /** Box 1e, Cost or other basis */
  costBasis?: number;
  /** Corrected cost basis. May be supplied in lieu of adjustmentCode code B. If both adjustmentCodes and correctedCostBasis are supplied, costBasis plus adjustmentCode B should equal correctedCostBasis */
  correctedCostBasis?: number;
  /** Box 1g, Wash sale loss disallowed */
  washSaleLossDisallowed?: number;
  /** LONG or SHORT (1099-B box 2) */
  longOrShort?: SaleTermType;
  /** Box 2, Ordinary */
  ordinary?: boolean;
  /** Box 3, Collectibles */
  collectible?: boolean;
  /** Box 3, Qualified Opportunity Fund (QOF) */
  qof?: boolean;
  /** Box 4, Federal income tax withheld */
  federalTaxWithheld?: number;
  /** Box 5, Noncovered security */
  noncoveredSecurity?: boolean;
  /** Box 6, Reported to IRS: GROSS or NET */
  grossOrNet?: SaleProceedsType;
  /** Box 7, Loss not allowed based on proceeds */
  lossNotAllowed?: boolean;
  /** Box 12, Basis reported to IRS */
  basisReported?: boolean;
  /** Boxes 14-16, State and Local tax withholding */
  stateAndLocal?: StateAndLocalTaxWithholding[];
  /** CUSIP number */
  cusip?: string;
  /** Foreign account tax compliance */
  foreignAccountTaxCompliance?: boolean;
  /** To indicate gain or loss resulted from option expiration. If salesPrice (1d, proceeds) is zero, use PURCHASED. If costBasis (1e) is zero, use GRANTED */
  expiredOption?: ExpiredOptionType;
  /** Type of investment sale */
  investmentSaleType?: InvestmentSaleType;
  additionalProperties?: Record<string, unknown>;
}

export const securityDetailIrsForm1099BSchema: Schema<SecurityDetailIrsForm1099B> = typedExpandoObject(
  {
    checkboxOnForm8949: ['checkboxOnForm8949', optional(string())],
    securityName: ['securityName', optional(string())],
    numberOfShares: ['numberOfShares', optional(number())],
    saleDescription: ['saleDescription', optional(string())],
    dateAcquired: ['dateAcquired', optional(string())],
    variousDatesAcquired: ['variousDatesAcquired', optional(boolean())],
    dateOfSale: ['dateOfSale', optional(string())],
    salesPrice: ['salesPrice', optional(number())],
    accruedMarketDiscount: ['accruedMarketDiscount', optional(number())],
    adjustmentCodes: [
      'adjustmentCodes',
      optional(array(lazy(() => codeAndAmountSchema))),
    ],
    costBasis: ['costBasis', optional(number())],
    correctedCostBasis: ['correctedCostBasis', optional(number())],
    washSaleLossDisallowed: ['washSaleLossDisallowed', optional(number())],
    longOrShort: ['longOrShort', optional(saleTermTypeSchema)],
    ordinary: ['ordinary', optional(boolean())],
    collectible: ['collectible', optional(boolean())],
    qof: ['qof', optional(boolean())],
    federalTaxWithheld: ['federalTaxWithheld', optional(number())],
    noncoveredSecurity: ['noncoveredSecurity', optional(boolean())],
    grossOrNet: ['grossOrNet', optional(saleProceedsTypeSchema)],
    lossNotAllowed: ['lossNotAllowed', optional(boolean())],
    basisReported: ['basisReported', optional(boolean())],
    stateAndLocal: [
      'stateAndLocal',
      optional(array(lazy(() => stateAndLocalTaxWithholdingSchema))),
    ],
    cusip: ['cusip', optional(string())],
    foreignAccountTaxCompliance: [
      'foreignAccountTaxCompliance',
      optional(boolean()),
    ],
    expiredOption: ['expiredOption', optional(expiredOptionTypeSchema)],
    investmentSaleType: [
      'investmentSaleType',
      optional(investmentSaleTypeSchema),
    ],
  },
  'additionalProperties',
  optional(unknown())
);
