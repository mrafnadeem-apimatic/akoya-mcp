/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema.js';
import { CodeAndAmount, codeAndAmountSchema } from './codeAndAmount.js';
import { Error, errorSchema } from './error.js';
import { HateoasLink, hateoasLinkSchema } from './hateoasLink.js';
import {
  TaxFormAttribute,
  taxFormAttributeSchema,
} from './taxFormAttribute.js';
import { TaxParty, taxPartySchema } from './taxParty.js';
import { TypeFormType, typeFormTypeSchema } from './typeFormType.js';

/** Partner's Share of Income, Deductions, Credits, etc. */
export interface Form1065K1 {
  /** Year for which taxes are being paid */
  taxYear?: number;
  /** True to indicate this is a corrected tax form */
  corrected?: boolean;
  /** Long-term persistent identity of the source account. Not the account number */
  accountId?: string;
  /** Long-term persistent id for this tax form. Depending upon the data provider, this may be the same id as the enclosing tax statement id, or this may be a different id, or this id may be omitted. */
  taxFormId?: string;
  /** Date of production or delivery of the tax form */
  taxFormDate?: string;
  /** Additional explanation text or content about this tax form */
  additionalInformation?: string;
  /** Enumerated name of the tax form entity e.g. "TaxW2" */
  taxFormType?: TypeFormType;
  /** Issuer's name, address, phone, and TIN. Issuer data need only be transmitted on enclosing TaxStatement, if it is the same on all its included tax forms. */
  issuer?: TaxParty;
  /** Recipient's name, address, phone, and TIN. Recipient data need only be transmitted on enclosing TaxStatement, if it is the same on all its included tax forms. */
  recipient?: TaxParty;
  /** Additional attributes for this tax form when defined fields are not available. Some specific additional attributes already defined by providers: Fields required by [IRS FIRE](https://www.irs.gov/e-file-providers/filing-information-returns-electronically-fire): Name Control, Type of Identification Number (EIN, SSN, ITIN, ATIN). (ATIN is tax ID number for pending adoptions.) Tax form provider field for taxpayer notification: Recipient Email Address. */
  attributes?: TaxFormAttribute[];
  /** Present if an error was encountered while retrieving this form */
  error?: Error;
  /** Links to retrieve this form as data or image, or to invoke other APIs */
  links?: HateoasLink[];
  /** Fiscal year begin date */
  fiscalYearBegin?: string;
  /** Fiscal year end data */
  fiscalYearEnd?: string;
  /** Final K-1 */
  finalK1?: boolean;
  /** Amended K-1 */
  amendedK1?: boolean;
  /** Box C, IRS Center where partnership filed return */
  irsCenter?: string;
  /** Box D, Check if this is a publicly traded partnership (PTP) */
  publiclyTraded?: boolean;
  /** Box G, General partner or LLC member-manager */
  generalPartner?: boolean;
  /** Box G, Limited partner or other LLC member */
  limitedPartner?: boolean;
  /** Box H1, Domestic partner */
  domestic?: boolean;
  /** Box H1, Foreign partner */
  foreign?: boolean;
  /** Box H2, Check if the partner is a disregarded entity (DE), and enter the partner's TIN and Name */
  disregardedEntity?: boolean;
  /** Box H2, Disregarded entity partner's TIN */
  disregardedEntityTin?: string;
  /** Box H2, Disregarded entity partner's Name */
  disregardedEntityName?: string;
  /** Box I1, What type of entity is this partner? */
  entityType?: string;
  /** Box I2, If this partner is a retirement plan (IRA/SEP/Keogh/etc.), check here */
  retirementPlan?: boolean;
  /** Box J, Partner's share of profit - beginning */
  profitShareBegin?: number;
  /** Box J, Partner's share of profit - ending */
  profitShareEnd?: number;
  /** Box J, Partner's share of loss - beginning */
  lossShareBegin?: number;
  /** Box J, Partner's share of loss - ending */
  lossShareEnd?: number;
  /** Box J, Partner's share of capital - beginning */
  capitalShareBegin?: number;
  /** Box J, Partner's share of capital - ending */
  capitalShareEnd?: number;
  /** Box J, Check if decrease is due to sale or exchange of partnership interest. Deprecated and no longer used beginning tax year 2023. Use `decreaseDueToSale` and `decreaseDueToExchange` instead */
  decreaseDueToSaleOrExchange?: boolean;
  /** Box J, Check if decrease is due to sale of partnership interest */
  decreaseDueToSale?: boolean;
  /** Box J, Check if decrease is due to exchange of partnership interest */
  decreaseDueToExchange?: boolean;
  /** Box K1, Partner's share of liabilities - beginning - nonrecourse */
  nonrecourseLiabilityShareBegin?: number;
  /** Box K1, Partner's share of liabilities - ending - nonrecourse */
  nonrecourseLiabilityShareEnd?: number;
  /** Box K1, Partner's share of liabilities - beginning - qualified nonrecourse financing */
  qualifiedLiabilityShareBegin?: number;
  /** Box K1, Partner's share of liabilities - ending - qualified nonrecourse financing */
  qualifiedLiabilityShareEnd?: number;
  /** Box K1, Partner's share of liabilities - beginning - recourse */
  recourseLiabilityShareBegin?: number;
  /** Box K1, Partner's share of liabilities - ending - recourse */
  recourseLiabilityShareEnd?: number;
  /** Box K2, Check this box if item K1 includes liability amounts from lower tier partnerships */
  includesLowerTierLiability?: boolean;
  /** Box K3, Check if any of the above liability is subject to guarantees or other payment obligations by the partner */
  liabilitySubjectToGuarantees?: boolean;
  /** Box L, Partner's capital account analysis - Beginning capital account */
  capitalAccountBegin?: number;
  /** Box L, Partner's capital account analysis - Capital contributed during the year */
  capitalAccountContributions?: number;
  /** Box L, Partner's capital account analysis - Current year net income (loss) */
  capitalAccountIncrease?: number;
  /** Box L, Partner's capital account analysis - Other increase (decrease) */
  capitalAccountOther?: number;
  /** Box L, Partner's capital account analysis - Withdrawals & distributions */
  capitalAccountWithdrawals?: number;
  /** Box L, Partner's capital account analysis - Ending capital account */
  capitalAccountEnd?: number;
  /** Box M, Did the partner contribute property with a built-in gain or loss? - Yes */
  builtInGain?: boolean;
  /** Box N, Partner's Share of Net Unrecognized Section 704(c) Gain or (Loss) - beginning */
  unrecognizedSection704Begin?: number;
  /** Box N, Partner's Share of Net Unrecognized Section 704(c) Gain or (Loss) - ending */
  unrecognizedSection704End?: number;
  /** Box 1, Ordinary business income (loss) */
  ordinaryIncome?: number;
  /** Box 2, Net rental real estate income (loss) */
  netRentalRealEstateIncome?: number;
  /** Box 3, Other net rental income (loss) */
  otherRentalIncome?: number;
  /** Box 4a, Guaranteed payments for services */
  guaranteedPaymentServices?: number;
  /** Box 4b, Guaranteed payments for capital */
  guaranteedPaymentCapital?: number;
  /** Box 4c, Total guaranteed payments */
  guaranteedPayment?: number;
  /** Box 5, Interest income */
  interestIncome?: number;
  /** Box 6a, Ordinary dividends */
  ordinaryDividends?: number;
  /** Box 6b, Qualified dividends */
  qualifiedDividends?: number;
  /** Box 6c, Dividend equivalents */
  dividendEquivalents?: number;
  /** Box 7, Royalties */
  royalties?: number;
  /** Box 8, Net short-term capital gain (loss) */
  netShortTermGain?: number;
  /** Box 9a, Net long-term capital gain (loss) */
  netLongTermGain?: number;
  /** Box 9b, Collectibles (28%) gain (loss) */
  collectiblesGain?: number;
  /** Box 9c, Unrecaptured section 1250 gain */
  unrecaptured1250Gain?: number;
  /** Box 10, Net section 1231 gain (loss) */
  net1231Gain?: number;
  /** Box 11, Other income */
  otherIncome?: CodeAndAmount[];
  /** Box 12, Section 179 deduction */
  section179Deduction?: number;
  /** Box 13, Other deductions */
  otherDeductions?: CodeAndAmount[];
  /** Box 14, Self-employment earnings (loss) */
  selfEmployment?: CodeAndAmount[];
  /** Box 15, Credits */
  credits?: CodeAndAmount[];
  /** Box 16, Schedule K-3 is attached */
  scheduleK3?: boolean;
  /** Box 17, Alternative minimum tax (AMT) items */
  amtItems?: CodeAndAmount[];
  /** Box 18, Tax-exempt income and nondeductible expenses */
  taxExemptIncome?: CodeAndAmount[];
  /** Box 19, Distributions */
  distributions?: CodeAndAmount[];
  /** Box 20, Other information */
  otherInfo?: CodeAndAmount[];
  /** Box 21, Foreign taxes paid or accrued */
  foreignTaxPaid?: number;
  /** Box 22, More than one activity for at-risk purposes */
  multipleAtRiskActivities?: boolean;
  /** Box 23, More than one activity for passive activity purposes */
  multiplePassiveActivities?: boolean;
  additionalProperties?: Record<string, unknown>;
}

export const form1065K1Schema: Schema<Form1065K1> = typedExpandoObject(
  {
    taxYear: ['taxYear', optional(number())],
    corrected: ['corrected', optional(boolean())],
    accountId: ['accountId', optional(string())],
    taxFormId: ['taxFormId', optional(string())],
    taxFormDate: ['taxFormDate', optional(string())],
    additionalInformation: ['additionalInformation', optional(string())],
    taxFormType: ['taxFormType', optional(typeFormTypeSchema)],
    issuer: ['issuer', optional(lazy(() => taxPartySchema))],
    recipient: ['recipient', optional(lazy(() => taxPartySchema))],
    attributes: [
      'attributes',
      optional(array(lazy(() => taxFormAttributeSchema))),
    ],
    error: ['error', optional(lazy(() => errorSchema))],
    links: ['links', optional(array(lazy(() => hateoasLinkSchema)))],
    fiscalYearBegin: ['fiscalYearBegin', optional(string())],
    fiscalYearEnd: ['fiscalYearEnd', optional(string())],
    finalK1: ['finalK1', optional(boolean())],
    amendedK1: ['amendedK1', optional(boolean())],
    irsCenter: ['irsCenter', optional(string())],
    publiclyTraded: ['publiclyTraded', optional(boolean())],
    generalPartner: ['generalPartner', optional(boolean())],
    limitedPartner: ['limitedPartner', optional(boolean())],
    domestic: ['domestic', optional(boolean())],
    foreign: ['foreign', optional(boolean())],
    disregardedEntity: ['disregardedEntity', optional(boolean())],
    disregardedEntityTin: ['disregardedEntityTin', optional(string())],
    disregardedEntityName: ['disregardedEntityName', optional(string())],
    entityType: ['entityType', optional(string())],
    retirementPlan: ['retirementPlan', optional(boolean())],
    profitShareBegin: ['profitShareBegin', optional(number())],
    profitShareEnd: ['profitShareEnd', optional(number())],
    lossShareBegin: ['lossShareBegin', optional(number())],
    lossShareEnd: ['lossShareEnd', optional(number())],
    capitalShareBegin: ['capitalShareBegin', optional(number())],
    capitalShareEnd: ['capitalShareEnd', optional(number())],
    decreaseDueToSaleOrExchange: [
      'decreaseDueToSaleOrExchange',
      optional(boolean()),
    ],
    decreaseDueToSale: ['decreaseDueToSale', optional(boolean())],
    decreaseDueToExchange: ['decreaseDueToExchange', optional(boolean())],
    nonrecourseLiabilityShareBegin: [
      'nonrecourseLiabilityShareBegin',
      optional(number()),
    ],
    nonrecourseLiabilityShareEnd: [
      'nonrecourseLiabilityShareEnd',
      optional(number()),
    ],
    qualifiedLiabilityShareBegin: [
      'qualifiedLiabilityShareBegin',
      optional(number()),
    ],
    qualifiedLiabilityShareEnd: [
      'qualifiedLiabilityShareEnd',
      optional(number()),
    ],
    recourseLiabilityShareBegin: [
      'recourseLiabilityShareBegin',
      optional(number()),
    ],
    recourseLiabilityShareEnd: [
      'recourseLiabilityShareEnd',
      optional(number()),
    ],
    includesLowerTierLiability: [
      'includesLowerTierLiability',
      optional(boolean()),
    ],
    liabilitySubjectToGuarantees: [
      'liabilitySubjectToGuarantees',
      optional(boolean()),
    ],
    capitalAccountBegin: ['capitalAccountBegin', optional(number())],
    capitalAccountContributions: [
      'capitalAccountContributions',
      optional(number()),
    ],
    capitalAccountIncrease: ['capitalAccountIncrease', optional(number())],
    capitalAccountOther: ['capitalAccountOther', optional(number())],
    capitalAccountWithdrawals: [
      'capitalAccountWithdrawals',
      optional(number()),
    ],
    capitalAccountEnd: ['capitalAccountEnd', optional(number())],
    builtInGain: ['builtInGain', optional(boolean())],
    unrecognizedSection704Begin: [
      'unrecognizedSection704Begin',
      optional(number()),
    ],
    unrecognizedSection704End: [
      'unrecognizedSection704End',
      optional(number()),
    ],
    ordinaryIncome: ['ordinaryIncome', optional(number())],
    netRentalRealEstateIncome: [
      'netRentalRealEstateIncome',
      optional(number()),
    ],
    otherRentalIncome: ['otherRentalIncome', optional(number())],
    guaranteedPaymentServices: [
      'guaranteedPaymentServices',
      optional(number()),
    ],
    guaranteedPaymentCapital: ['guaranteedPaymentCapital', optional(number())],
    guaranteedPayment: ['guaranteedPayment', optional(number())],
    interestIncome: ['interestIncome', optional(number())],
    ordinaryDividends: ['ordinaryDividends', optional(number())],
    qualifiedDividends: ['qualifiedDividends', optional(number())],
    dividendEquivalents: ['dividendEquivalents', optional(number())],
    royalties: ['royalties', optional(number())],
    netShortTermGain: ['netShortTermGain', optional(number())],
    netLongTermGain: ['netLongTermGain', optional(number())],
    collectiblesGain: ['collectiblesGain', optional(number())],
    unrecaptured1250Gain: ['unrecaptured1250Gain', optional(number())],
    net1231Gain: ['net1231Gain', optional(number())],
    otherIncome: [
      'otherIncome',
      optional(array(lazy(() => codeAndAmountSchema))),
    ],
    section179Deduction: ['section179Deduction', optional(number())],
    otherDeductions: [
      'otherDeductions',
      optional(array(lazy(() => codeAndAmountSchema))),
    ],
    selfEmployment: [
      'selfEmployment',
      optional(array(lazy(() => codeAndAmountSchema))),
    ],
    credits: ['credits', optional(array(lazy(() => codeAndAmountSchema)))],
    scheduleK3: ['scheduleK3', optional(boolean())],
    amtItems: ['amtItems', optional(array(lazy(() => codeAndAmountSchema)))],
    taxExemptIncome: [
      'taxExemptIncome',
      optional(array(lazy(() => codeAndAmountSchema))),
    ],
    distributions: [
      'distributions',
      optional(array(lazy(() => codeAndAmountSchema))),
    ],
    otherInfo: ['otherInfo', optional(array(lazy(() => codeAndAmountSchema)))],
    foreignTaxPaid: ['foreignTaxPaid', optional(number())],
    multipleAtRiskActivities: ['multipleAtRiskActivities', optional(boolean())],
    multiplePassiveActivities: [
      'multiplePassiveActivities',
      optional(boolean()),
    ],
  },
  'additionalProperties',
  optional(unknown())
);
