/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema.js';
import { CodeAndAmount, codeAndAmountSchema } from './codeAndAmount.js';
import { Error, errorSchema } from './error.js';
import { HateoasLink, hateoasLinkSchema } from './hateoasLink.js';
import {
  TaxFormAttribute,
  taxFormAttributeSchema,
} from './taxFormAttribute.js';
import { TaxParty, taxPartySchema } from './taxParty.js';
import { TypeFormType, typeFormTypeSchema } from './typeFormType.js';

/** Beneficiary's Share of Income, Deductions, Credits, etc. */
export interface Form1041K1 {
  /** Year for which taxes are being paid */
  taxYear?: number;
  /** True to indicate this is a corrected tax form */
  corrected?: boolean;
  /** Long-term persistent identity of the source account. Not the account number */
  accountId?: string;
  /** Long-term persistent id for this tax form. Depending upon the data provider, this may be the same id as the enclosing tax statement id, or this may be a different id, or this id may be omitted. */
  taxFormId?: string;
  /** Date of production or delivery of the tax form */
  taxFormDate?: string;
  /** Additional explanation text or content about this tax form */
  additionalInformation?: string;
  /** Enumerated name of the tax form entity e.g. "TaxW2" */
  taxFormType?: TypeFormType;
  /** Issuer's name, address, phone, and TIN. Issuer data need only be transmitted on enclosing TaxStatement, if it is the same on all its included tax forms. */
  issuer?: TaxParty;
  /** Recipient's name, address, phone, and TIN. Recipient data need only be transmitted on enclosing TaxStatement, if it is the same on all its included tax forms. */
  recipient?: TaxParty;
  /** Additional attributes for this tax form when defined fields are not available. Some specific additional attributes already defined by providers: Fields required by [IRS FIRE](https://www.irs.gov/e-file-providers/filing-information-returns-electronically-fire): Name Control, Type of Identification Number (EIN, SSN, ITIN, ATIN). (ATIN is tax ID number for pending adoptions.) Tax form provider field for taxpayer notification: Recipient Email Address. */
  attributes?: TaxFormAttribute[];
  /** Present if an error was encountered while retrieving this form */
  error?: Error;
  /** Links to retrieve this form as data or image, or to invoke other APIs */
  links?: HateoasLink[];
  /** Final K-1 */
  finalK1?: boolean;
  /** Amended K-1 */
  amendedK1?: boolean;
  /** Fiscal year begin date */
  fiscalYearBegin?: string;
  /** Fiscal year end date */
  fiscalYearEnd?: string;
  /** Box D, Check if Form 1041-T was filed */
  form1041T?: boolean;
  /** Box D, and enter the date it was filed */
  date1041T?: string;
  /** Box E, Check if this is the final Form 1041 for the estate or trust */
  final1041?: boolean;
  /** Box H, Domestic beneficiary */
  domestic?: boolean;
  /** Box H, Foreign beneficiary */
  foreign?: boolean;
  /** Box 1, Interest income */
  interestIncome?: number;
  /** Box 2a, Ordinary dividends */
  ordinaryDividends?: number;
  /** Box 2b, Qualified dividends */
  qualifiedDividends?: number;
  /** Box 3, Net short-term capital gain */
  netShortTermGain?: number;
  /** Box 4a, Net long-term capital gain */
  netLongTermGain?: number;
  /** Box 4b, 28% rate gain */
  gain28Rate?: number;
  /** Box 4c, Unrecaptured section 1250 gain */
  unrecaptured1250Gain?: number;
  /** Box 5, Other portfolio and nonbusiness income */
  otherPortfolioIncome?: number;
  /** Box 6, Ordinary business income */
  ordinaryBusinessIncome?: number;
  /** Box 7, Net rental real estate income */
  netRentalRealEstateIncome?: number;
  /** Box 8, Other rental income */
  otherRentalIncome?: number;
  /** Box 9, Directly apportioned deductions */
  directlyApportionedDeductions?: CodeAndAmount[];
  /** Box 10, Estate tax deduction */
  estateTaxDeduction?: number;
  /** Box 11, Final year deductions */
  finalYearDeductions?: CodeAndAmount[];
  /** Box C, Fiduciary's name and address */
  fiduciary?: TaxParty;
  /** Box 12, Alternative minimum tax adjustment */
  amtAdjustments?: CodeAndAmount[];
  /** Box 13, Credits and credit recapture */
  credits?: CodeAndAmount[];
  /** Box 14, Other information */
  otherInfo?: CodeAndAmount[];
  additionalProperties?: Record<string, unknown>;
}

export const form1041K1Schema: Schema<Form1041K1> = typedExpandoObject(
  {
    taxYear: ['taxYear', optional(number())],
    corrected: ['corrected', optional(boolean())],
    accountId: ['accountId', optional(string())],
    taxFormId: ['taxFormId', optional(string())],
    taxFormDate: ['taxFormDate', optional(string())],
    additionalInformation: ['additionalInformation', optional(string())],
    taxFormType: ['taxFormType', optional(typeFormTypeSchema)],
    issuer: ['issuer', optional(lazy(() => taxPartySchema))],
    recipient: ['recipient', optional(lazy(() => taxPartySchema))],
    attributes: [
      'attributes',
      optional(array(lazy(() => taxFormAttributeSchema))),
    ],
    error: ['error', optional(lazy(() => errorSchema))],
    links: ['links', optional(array(lazy(() => hateoasLinkSchema)))],
    finalK1: ['finalK1', optional(boolean())],
    amendedK1: ['amendedK1', optional(boolean())],
    fiscalYearBegin: ['fiscalYearBegin', optional(string())],
    fiscalYearEnd: ['fiscalYearEnd', optional(string())],
    form1041T: ['form1041T', optional(boolean())],
    date1041T: ['date1041T', optional(string())],
    final1041: ['final1041', optional(boolean())],
    domestic: ['domestic', optional(boolean())],
    foreign: ['foreign', optional(boolean())],
    interestIncome: ['interestIncome', optional(number())],
    ordinaryDividends: ['ordinaryDividends', optional(number())],
    qualifiedDividends: ['qualifiedDividends', optional(number())],
    netShortTermGain: ['netShortTermGain', optional(number())],
    netLongTermGain: ['netLongTermGain', optional(number())],
    gain28Rate: ['gain28Rate', optional(number())],
    unrecaptured1250Gain: ['unrecaptured1250Gain', optional(number())],
    otherPortfolioIncome: ['otherPortfolioIncome', optional(number())],
    ordinaryBusinessIncome: ['ordinaryBusinessIncome', optional(number())],
    netRentalRealEstateIncome: [
      'netRentalRealEstateIncome',
      optional(number()),
    ],
    otherRentalIncome: ['otherRentalIncome', optional(number())],
    directlyApportionedDeductions: [
      'directlyApportionedDeductions',
      optional(array(lazy(() => codeAndAmountSchema))),
    ],
    estateTaxDeduction: ['estateTaxDeduction', optional(number())],
    finalYearDeductions: [
      'finalYearDeductions',
      optional(array(lazy(() => codeAndAmountSchema))),
    ],
    fiduciary: ['fiduciary', optional(lazy(() => taxPartySchema))],
    amtAdjustments: [
      'amtAdjustments',
      optional(array(lazy(() => codeAndAmountSchema))),
    ],
    credits: ['credits', optional(array(lazy(() => codeAndAmountSchema)))],
    otherInfo: ['otherInfo', optional(array(lazy(() => codeAndAmountSchema)))],
  },
  'additionalProperties',
  optional(unknown())
);
