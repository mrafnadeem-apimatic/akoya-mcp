/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import {
  AccountContactEntity,
  accountContactEntitySchema,
} from '../models/accountContactEntity.js';
import {
  CurrentCustomer,
  currentCustomerSchema,
} from '../models/currentCustomer.js';
import {
  InteractionType,
  interactionTypeSchema,
} from '../models/interactionType.js';
import { optional, string } from '../schema.js';
import { BaseApi } from './baseApi.js';
import { ApiError } from '@apimatic/core';
import { ErrorError } from '../errors/errorError.js';

export class CustomersApi extends BaseApi {
  /**
   * This product supports use cases such as payment enablement, account opening, and identity
   * verification. Responses return information about the authorized end-user, the customer associated
   * with the `id_token` used in the call. This information may include, but is not limited to, the
   * customer identifier, name, email, address, and phone number.
   *
   * <br>
   *
   * To see the response schema, select the `200` response below. For an example payload response, see
   * the `200` example response below the *Try it* feature.
   *
   * This product requires consumer consent to share all account holder information.
   *
   * > ðŸ›‘ The `id_token` should be used as the bearer token with this call.
   * >
   *
   * @param version                  Akoya major version number. Do not use minor version numbers.
   *                                                    For instance, use v2 and not v2.2
   * @param providerId               Id of provider
   * @param xAkoyaInteractionType    Optional but recommended header to include with each data
   *                                                    request.  Allowed values are `user` or `batch`.  `user`
   *                                                    indicates a request is prompted by an end-user action. `batch`
   *                                                    indicates the request is part of a batch process.
   * @return Response from the API call
   */
  async customerInfo(
    version: string,
    providerId: string,
    xAkoyaInteractionType?: InteractionType,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CurrentCustomer>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      version: [version, string()],
      providerId: [providerId, string()],
      xAkoyaInteractionType: [
        xAkoyaInteractionType,
        optional(interactionTypeSchema),
      ],
    });
    req.header('x-akoya-interaction-type', mapped.xAkoyaInteractionType);
    req.appendTemplatePath`/customers/${mapped.version}/${mapped.providerId}/current`;
    req.throwOn(405, ApiError, 'Method Not Allowed');
    req.throwOn(
      408,
      ErrorError,
      'Request timed out (round trip call took >10 seconds).'
    );
    req.authenticate([{ acgAuth: true }]);
    return req.callAsJson(currentCustomerSchema, requestOptions);
  }

  /**
   * This product supports use cases such as payment enablement, account opening, identity verification,
   * or lending & credit enhancement. Responses return information about the authorized consumer, the
   * customer associated with the `id_token` used in the call, and the relationship specific to the
   * provided `accountId`.
   *
   * > ðŸ“Œ Please note!
   * >
   * > This endpoint provides additional information which may not be required for your use case, making
   * it inefficient compared to the [/customer info](https://docs.akoya.com/reference/customer-info)
   * endpoint. Please refer to to the [Customers guide](https://docs.akoya.com/reference/customers) for
   * more information about this endpoint.
   *
   * Get account holder information. Based on FDX 5.2.1.
   *
   * This product requires consumer consent to share all account holder information.
   *
   * > ðŸ›‘ The `id_token` should be used as the bearer token with this call.
   * >
   *
   *
   * @param accountId                Account Identifier
   * @param version                  Akoya major version number. Do not use minor version numbers.
   *                                                    For instance, use v2 and not v2.2
   * @param providerId               Id of provider
   * @param xAkoyaInteractionType    Optional but recommended header to include with each data
   *                                                    request.  Allowed values are `user` or `batch`.  `user`
   *                                                    indicates a request is prompted by an end-user action. `batch`
   *                                                    indicates the request is part of a batch process.
   * @return Response from the API call
   */
  async getAccountHolder(
    accountId: string,
    version: string,
    providerId: string,
    xAkoyaInteractionType?: InteractionType,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AccountContactEntity>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      version: [version, string()],
      providerId: [providerId, string()],
      xAkoyaInteractionType: [
        xAkoyaInteractionType,
        optional(interactionTypeSchema),
      ],
    });
    req.header('x-akoya-interaction-type', mapped.xAkoyaInteractionType);
    req.appendTemplatePath`/contacts/${mapped.version}/${mapped.providerId}/${mapped.accountId}`;
    req.throwOn(404, ErrorError, 'Not Found');
    req.throwOn(405, ApiError, 'Method Not Allowed');
    req.throwOn(
      408,
      ErrorError,
      'Request timed out (round trip call took >10 seconds).'
    );
    req.authenticate([{ acgAuth: true }]);
    return req.callAsJson(accountContactEntitySchema, requestOptions);
  }
}
