/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import {
  InteractionType,
  interactionTypeSchema,
} from '../models/interactionType.js';
import { MediaType, mediaTypeSchema } from '../models/mediaType.js';
import { TaxStatement, taxStatementSchema } from '../models/taxStatement.js';
import {
  TaxStatementList,
  taxStatementListSchema,
} from '../models/taxStatementList.js';
import { TypeDataType, typeDataTypeSchema } from '../models/typeDataType.js';
import { TypeFormType, typeFormTypeSchema } from '../models/typeFormType.js';
import { Version, versionSchema } from '../models/version.js';
import { array, optional, string } from '../schema.js';
import { BaseApi } from './baseApi.js';
import { ApiError } from '@apimatic/core';
import { ErrorError } from '../errors/errorError.js';

export class TaxBetaApi extends BaseApi {
  /**
   * Get the full lists of tax document data and tax form images available for a specific year for the
   * current authorized customer.
   *
   * @param version                  Endpoint version.
   * @param providerId               Provider to query for Tax data.
   * @param xAkoyaInteractionId      Unique identifier to associate with this request. No specific
   *                                                    format required.
   * @param xAkoyaInteractionType    Identifies whether the customer is present (USER) or it is a
   *                                                    BATCH operation. Case-insensitive.
   * @param accept                   Use the [Accept HTTP request header](https://developer.mozilla.
   *                                                    org/en-US/docs/Web/HTTP/Headers/Accept) to indicate one or more
   *                                                    content types to request for the search result response. Use
   *                                                    `application/json` to request data or `application/pdf to
   *                                                    request images in comma-separated array format.         Use in
   *                                                    combination with TaxDataTypeQuery parameter to request
   *                                                    `application/json` responses in ''JSON'' or ''BASE64_PDF''
   *                                                    format for tax form data'
   * @param taxYear                  Tax year in which to search for tax forms.
   * @param taxForms                 One or more tax form type enums for the specific documents
   *                                                    being requested. Comma separated
   * @param accountId                Unique account identifier (not the account number)
   * @return Response from the API call
   */
  async taxFormsSearch(
    version: Version,
    providerId: string,
    xAkoyaInteractionId?: string,
    xAkoyaInteractionType?: InteractionType,
    accept?: MediaType[],
    taxYear?: string,
    taxForms?: TypeFormType[],
    accountId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TaxStatementList>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      version: [version, versionSchema],
      providerId: [providerId, string()],
      xAkoyaInteractionId: [xAkoyaInteractionId, optional(string())],
      xAkoyaInteractionType: [
        xAkoyaInteractionType,
        optional(interactionTypeSchema),
      ],
      accept: [accept, optional(array(mediaTypeSchema))],
      taxYear: [taxYear, optional(string())],
      taxForms: [taxForms, optional(array(typeFormTypeSchema))],
      accountId: [accountId, optional(string())],
    });
    req.header('x-akoya-interaction-id', mapped.xAkoyaInteractionId);
    req.header('x-akoya-interaction-type', mapped.xAkoyaInteractionType);
    req.header('Accept', mapped.accept);
    req.query('taxYear', mapped.taxYear);
    req.query('taxForms', mapped.taxForms);
    req.query('accountId', mapped.accountId);
    req.appendTemplatePath`/tax-forms/${mapped.version}/${mapped.providerId}`;
    req.throwOn(400, ErrorError, 'Bad Request');
    req.throwOn(404, ErrorError, 'Not Found');
    req.throwOn(405, ApiError, 'Method Not Allowed');
    req.throwOn(406, ErrorError, 'Content Type not Supported');
    req.throwOn(
      408,
      ErrorError,
      'Request timed out (round trip call took >10 seconds).'
    );
    req.throwOn(409, ErrorError, 'Conflict');
    req.throwOn(
      500,
      ErrorError,
      'Catch-all exception where request was not processed due to an internal outage/issue.'
    );
    req.throwOn(501, ErrorError, 'FdxVersion in header is not implemented.');
    req.throwOn(503, ErrorError, 'System is down for maintenance.');
    req.authenticate([{ acgAuth: true }]);
    return req.callAsJson(taxStatementListSchema, requestOptions);
  }

  /**
   * Get the Tax Statement as JSON or PDF for a single tax document for the customer. Use [HTTP Accept
   * request-header](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html) to specify desired content
   * types. See `AcceptHeader` definition for typical values.
   *
   *
   *
   * Not all providers support PDF payloads. See [this article](https://recipient.ddp.akoya.
   * com/support/article/kA0Uw00000026VxKAI) in the Data Recipent Hub for a list of providers that
   * support document PDFs.
   *
   * @param version                  Endpoint version.
   * @param providerId               Provider to query for Tax data.
   * @param taxFormId                Unique identifier of the tax form to request.
   * @param xAkoyaInteractionId      Unique identifier to associate with this request. No specific
   *                                                    format required.
   * @param xAkoyaInteractionType    Identifies whether the customer is present (USER) or it is a
   *                                                    BATCH operation. Case-insensitive.
   * @param taxDataType              Use taxDataType to request `application/json` tax form data
   *                                                    response in 'JSON' or 'BASE64_PDF' format. Omit if either
   *                                                    format is acceptable. Used in combination with AcceptHeader
   *                                                    requesting `application/json` response
   * @param accept                   Use the [Accept HTTP request header](https://developer.mozilla.
   *                                                    org/en-US/docs/Web/HTTP/Headers/Accept) to indicate one or more
   *                                                    content types to request for the search result response. Use
   *                                                    `application/json` to request data or `application/pdf`to
   *                                                    request images. In comma-separated array format.         Use in
   *                                                    combination with TaxDataTypeQuery parameter to request
   *                                                    `application/json` responses in ''JSON'' or ''BASE64_PDF''
   *                                                    format for tax form data'
   * @return Response from the API call
   */
  async getTaxForm(
    version: Version,
    providerId: string,
    taxFormId: string,
    xAkoyaInteractionId?: string,
    xAkoyaInteractionType?: InteractionType,
    taxDataType?: TypeDataType,
    accept?: MediaType[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TaxStatement>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      version: [version, versionSchema],
      providerId: [providerId, string()],
      taxFormId: [taxFormId, string()],
      xAkoyaInteractionId: [xAkoyaInteractionId, optional(string())],
      xAkoyaInteractionType: [
        xAkoyaInteractionType,
        optional(interactionTypeSchema),
      ],
      taxDataType: [taxDataType, optional(typeDataTypeSchema)],
      accept: [accept, optional(array(mediaTypeSchema))],
    });
    req.header('x-akoya-interaction-id', mapped.xAkoyaInteractionId);
    req.header('x-akoya-interaction-type', mapped.xAkoyaInteractionType);
    req.header('Accept', mapped.accept);
    req.query('taxDataType', mapped.taxDataType);
    req.appendTemplatePath`/tax-forms/${mapped.version}/${mapped.providerId}/${mapped.taxFormId}`;
    req.throwOn(
      400,
      ErrorError,
      'Account ID is required for searching or validating authorization'
    );
    req.throwOn(
      404,
      ErrorError,
      'Tax Form for provided Tax Form ID was not found'
    );
    req.throwOn(405, ApiError, 'Method Not Allowed');
    req.throwOn(406, ErrorError, 'Content Type not Supported');
    req.throwOn(
      408,
      ErrorError,
      'Request timed out (round trip call took >10 seconds).'
    );
    req.throwOn(
      409,
      ErrorError,
      'Tax forms are not currently available for this account or this year'
    );
    req.throwOn(
      500,
      ErrorError,
      'Catch-all exception where request was not processed due to an internal outage/issue.'
    );
    req.throwOn(501, ErrorError, 'FdxVersion in header is not implemented.');
    req.throwOn(503, ErrorError, 'System is down for maintenance.');
    req.authenticate([{ acgAuth: true }]);
    return req.callAsJson(taxStatementSchema, requestOptions);
  }
}
