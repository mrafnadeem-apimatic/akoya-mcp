/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import { Accept, acceptSchema } from '../models/accept.js';
import {
  InteractionType,
  interactionTypeSchema,
} from '../models/interactionType.js';
import {
  PaginatedArray,
  paginatedArraySchema,
} from '../models/paginatedArray.js';
import { number, optional, string, unknown } from '../schema.js';
import { BaseApi } from './baseApi.js';
import { ApiError } from '@apimatic/core';
import { ErrorError } from '../errors/errorError.js';

export class StatementsApi extends BaseApi {
  /**
   * Retrieve a list of available statements for the end-user's consented accounts. You may request a
   * date range of up to two years of historical statements (maximum date ranges vary by provider).
   *
   * The paginated response includes an array of statement information with the end-user's account id and
   * statement details such as statement id, date, description, and status. The results also include
   * links to GET the statement image.
   *
   * @param accountId                Account Identifier
   * @param version                  Akoya major version number. Do not use minor version numbers.
   *                                                    For instance, use v2 and not v2.2
   * @param providerId               Id of provider
   * @param startTime                Start date for use in retrieval of statements (ISO 8601)
   * @param endTime                  End date for use in retrieval of statements (ISO 8601)
   * @param offset                   The number of items to skip before the first in the response.
   *                                                    The default is 0.
   * @param limit                    The maximum number of items to be returned in the response.
   *                                                    The default is 50.
   * @param xAkoyaInteractionType    Optional but recommended header to include with each data
   *                                                    request.  Allowed values are `user` or `batch`.  `user`
   *                                                    indicates a request is prompted by an end-user action. `batch`
   *                                                    indicates the request is part of a batch process.
   * @return Response from the API call
   */
  async getStatementList(
    accountId: string,
    version: string,
    providerId: string,
    startTime?: string,
    endTime?: string,
    offset?: string,
    limit?: number,
    xAkoyaInteractionType?: InteractionType,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PaginatedArray>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      version: [version, string()],
      providerId: [providerId, string()],
      startTime: [startTime, optional(string())],
      endTime: [endTime, optional(string())],
      offset: [offset, optional(string())],
      limit: [limit, optional(number())],
      xAkoyaInteractionType: [
        xAkoyaInteractionType,
        optional(interactionTypeSchema),
      ],
    });
    req.header('x-akoya-interaction-type', mapped.xAkoyaInteractionType);
    req.query('startTime', mapped.startTime);
    req.query('endTime', mapped.endTime);
    req.query('offset', mapped.offset);
    req.query('limit', mapped.limit);
    req.appendTemplatePath`/statements/${mapped.version}/${mapped.providerId}/${mapped.accountId}`;
    req.throwOn(
      400,
      ErrorError,
      'Start or end date value is not in the ISO 8601 format.'
    );
    req.throwOn(404, ErrorError, '404 - Not found');
    req.throwOn(405, ApiError, 'Method Not Allowed');
    req.throwOn(
      408,
      ErrorError,
      'Request timed out (round trip call took >10 seconds).'
    );
    req.throwOn(
      500,
      ErrorError,
      'Catch-all exception where request was not processed due to an internal outage/issue.'
    );
    req.throwOn(501, ErrorError, 'FdxVersion in header is not implemented.');
    req.throwOn(503, ErrorError, 'System is down for maintenance.');
    req.authenticate([{ acgAuth: true }]);
    return req.callAsJson(paginatedArraySchema, requestOptions);
  }

  /**
   * Retrieve a specific account statement file. Use [HTTP Accept request-header](https://www.w3.
   * org/Protocols/rfc2616/rfc2616-sec14.html) to specify desired content types.
   *
   * For the initial launch, only PDF statements are supported. PDFs are returned in the response.
   *
   * ### cURL request
   *
   * We recommend using the auto-generated cURL request with the {idToken}, accountId, providerId,
   * statementId, and version with an added cURL parameter to return the output to a file. For example:
   *
   * ```curl
   * curl --request GET --url https://sandbox-products.ddp.akoya.
   * com/statements/v2/mikomo/513815781465/P9CvLPKDaFRMbNDkhu1 --header "accept: application/pdf" --
   * header "authorization: Bearer {idtoken}" --output example.pdf
   * ```
   *
   * @param accountId                Account Identifier
   * @param version                  Akoya major version number. Do not use minor version numbers.
   *                                                    For instance, use v2 and not v2.2
   * @param providerId               Id of provider
   * @param statementId              Statement Identifier
   * @param accept                   Example: application/pdf
   * @param xAkoyaInteractionType    Optional but recommended header to include with each data
   *                                                    request.  Allowed values are `user` or `batch`.  `user`
   *                                                    indicates a request is prompted by an end-user action. `batch`
   *                                                    indicates the request is part of a batch process.
   * @return Response from the API call
   */
  async getStatements(
    accountId: string,
    version: string,
    providerId: string,
    statementId: string,
    accept?: Accept,
    xAkoyaInteractionType?: InteractionType,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      accountId: [accountId, string()],
      version: [version, string()],
      providerId: [providerId, string()],
      statementId: [statementId, string()],
      accept: [accept, optional(acceptSchema)],
      xAkoyaInteractionType: [
        xAkoyaInteractionType,
        optional(interactionTypeSchema),
      ],
    });
    req.header('Accept', mapped.accept);
    req.header('x-akoya-interaction-type', mapped.xAkoyaInteractionType);
    req.appendTemplatePath`/statements/${mapped.version}/${mapped.providerId}/${mapped.accountId}/${mapped.statementId}`;
    req.throwOn(
      400,
      ErrorError,
      'Statement is processing and is not yet available.'
    );
    req.throwOn(404, ErrorError, 'Account exists but contains no statements.');
    req.throwOn(405, ApiError, 'Method Not Allowed');
    req.throwOn(406, ErrorError, 'Content Type not Supported');
    req.throwOn(
      408,
      ErrorError,
      'Request timed out (round trip call took >10 seconds).'
    );
    req.throwOn(
      500,
      ErrorError,
      'Catch-all exception where request was not processed due to an internal outage/issue.'
    );
    req.throwOn(501, ErrorError, 'FdxVersion in header is not implemented.');
    req.throwOn(503, ErrorError, 'System is down for maintenance.');
    req.authenticate([{ acgAuth: true }]);
    return req.callAsJson(unknown(), requestOptions);
  }
}
