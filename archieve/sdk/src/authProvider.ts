/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  compositeAuthenticationProvider,
  OAuthConfiguration,
  requestAuthenticationProvider,
} from './authentication.js';
import { AuthorizationCodeAuthManager } from './authorizationCodeAuthManager.js';
import { Configuration } from './configuration.js';

export function createAuthProviderFromConfig(
  config: Partial<Configuration>,
  acgAuth: () => AuthorizationCodeAuthManager
) {
  const authConfig = {
    acgAuth:
      config.authorizationCodeAuthCredentials &&
      requestAuthenticationProvider(
        config.authorizationCodeAuthCredentials.oauthToken,
        () => acgAuth().updateToken(),
        config.authorizationCodeAuthCredentials.oauthOnTokenUpdate,
        {
          clockSkew: config.authorizationCodeAuthCredentials.oauthClockSkew,
        } as OAuthConfiguration,
        (request, token) => acgAuth().setOAuthHeader(request, token)
      ),
  };

  return compositeAuthenticationProvider<
    keyof typeof authConfig,
    typeof authConfig
  >(authConfig);
}
