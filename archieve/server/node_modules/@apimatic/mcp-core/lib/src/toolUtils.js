import {} from '@modelcontextprotocol/sdk/types.js';
import { createErrorMessage, getToolName, stringifyRawJson } from './utils.js';
/**
 * Creates a tool definition from a given endpoint.
 */
export function createToolFromEndpoint(endpointId, endpoint, sdkClient) {
    const schema = endpoint.requestSchema.toJSONSchema();
    // The Model Context Protocol SDK requires that all tool input schemas be of type 'object'.
    if (!isObjectSchema(schema)) {
        throw new Error('Request schema must be an object type!');
    }
    return {
        tool: {
            name: getToolName(endpointId),
            description: endpoint.description,
            inputSchema: schema,
        },
        handler: (args) => handleEndpoint(endpoint, args, sdkClient),
    };
}
/**
 * Handles the execution of an API endpoint by validating input arguments,
 * invoking the endpoint, and formatting the response or error.
 */
async function handleEndpoint(endpoint, args, sdkClient) {
    const validationResult = endpoint.requestSchema.validateAndMap(args);
    if (validationResult.errors) {
        return {
            content: validationResult.errors.map((error) => ({
                type: 'text',
                text: stringifyRawJson(error),
            })),
            isError: true,
        };
    }
    const result = validationResult.result;
    try {
        const response = await endpoint.call(sdkClient, result);
        return {
            content: [
                {
                    type: 'text',
                    text: stringifyRawJson({
                        statusCode: response.statusCode,
                        responseHeaders: response.headers,
                        result: response.body,
                    }),
                },
            ],
        };
    }
    catch (error) {
        return await createErrorMessage(error);
    }
}
/**
 * Determines whether the provided JSON schema is an object schema.
 */
function isObjectSchema(schema) {
    return schema && schema.type === 'object';
}
//# sourceMappingURL=toolUtils.js.map