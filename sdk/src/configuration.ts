/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { HttpClientOptions } from './clientAdapter.js';
import { PartialLoggingOptions } from './core.js';
import { OauthToken } from './models/oauthToken.js';

/** An interface for all configuration parameters required by the SDK. */
export interface Configuration {
  timeout: number;
  environment: Environment;
  authorizationCodeAuthCredentials?: {
    oauthClientId: string;
    oauthClientSecret: string;
    oauthRedirectUri: string;
    oauthToken?: OauthToken;
    oauthOnTokenUpdate?: (token: OauthToken) => void;
    oauthClockSkew?: number;
  };
  httpClientOptions?: Partial<HttpClientOptions>;
  unstable_httpClientOptions?: any;
  logging?: PartialLoggingOptions;
}

/** Environments available for API */
export enum Environment {
  Sandbox = 'Sandbox',
  Production = 'Production',
}

export function createConfigurationFromEnvironment(): Partial<Configuration> {
  const config: Partial<Configuration> = {};

  const environment = process.env.AKOYA_ENVIRONMENT;
  const timeout = process.env.AKOYA_TIMEOUT;
  const oauthClientId = process.env.AKOYA_OAUTH_CLIENT_ID;
  const oauthClientSecret = process.env.AKOYA_OAUTH_CLIENT_SECRET;
  const oauthRedirectUri = process.env.AKOYA_OAUTH_REDIRECT_URI;
  const oauthBearerToken = process.env.AKOYA_OAUTH_BEARER_TOKEN;


  if (environment !== undefined) {
    config.environment = environment as Environment;
  }

  if (timeout !== undefined && timeout !== '') {
    config.timeout = parseInt(timeout);
  }

  if (oauthBearerToken) {
    config.authorizationCodeAuthCredentials = {
      oauthToken: { idToken: oauthBearerToken, tokenType: 'Bearer' },
      oauthClientId: oauthClientId ?? '',
      oauthClientSecret: oauthClientSecret ?? '',
      oauthRedirectUri: oauthRedirectUri ?? '',
    }

    return config;
  }

  if (
    oauthClientId !== undefined
    && oauthClientSecret !== undefined
    && oauthRedirectUri !== undefined
  ) {
    config.authorizationCodeAuthCredentials = {
      oauthClientId: oauthClientId,
      oauthClientSecret: oauthClientSecret,
      oauthRedirectUri: oauthRedirectUri,
    };
  }

  return config;
}
