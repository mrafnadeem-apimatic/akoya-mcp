/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { PagedAsyncIterable, pathParam, RequestOptions } from '../core.js';
import { TransactionsEntityTransactions } from '../models/containers/transactionsEntityTransactions.js';
import {
  InteractionType,
  interactionTypeSchema,
} from '../models/interactionType.js';
import { Mode, modeSchema } from '../models/mode.js';
import {
  TransactionsEntity,
  transactionsEntitySchema,
} from '../models/transactionsEntity.js';
import {
  createLinkPagedResponse,
  createPagedData,
  LinkPagedResponse,
  LinkPagination,
} from '../pagination.js';
import { number, optional, string } from '../schema.js';
import { BaseApi } from './baseApi.js';
import { ApiError } from '@apimatic/core';
import { ErrorError } from '../errors/errorError.js';

export class TransactionsApi extends BaseApi {
  /**
   * The transactions API allows you to retrieve transaction history of consumer-permissioned accounts.
   *
   * > ðŸ›‘
   * >
   * > The *id_token* should be used as the bearer token with this call.
   *
   * For more information on how to paginate transaction results, please see: [Pagination](https://docs.
   * akoya.com/v2/docs/pagination)
   *
   * Use the `mode` query param to receive FDX-aligned, standardized data values (Beta). For example:
   *
   * `https://sandbox-products.ddp.akoya.com/transactions/v2/mikomo?mode=standard`
   *
   * `mode` is available in both sandbox and production.
   *
   * `mode` is supported by a subset of providers. Log into the [Data Recipient Hub](https://recipient.
   * ddp.akoya.com/login) and click [here](https://recipient.ddp.akoya.
   * com/support/article/kA0Uw00000015GzKAI) to view a list of all providers supporting the `mode`
   * parameter.
   *
   * @param version                  Akoya major version number. Do not use minor version numbers.
   *                                                    For instance, use v2 and not v2.2
   * @param providerId               Id of provider
   * @param accountId                Account Identifier
   * @param startTime                ISO 8601 date format in UTC time zone. If blank, the default
   *                                                    value (current date - 15 calendar days) is used. If a value is
   *                                                    specified, endTime is required.
   * @param endTime                  ISO 8601 date format in UTC time zone. If blank, the default
   *                                                    value (current date) is used. If a value is specified,
   *                                                    startTime is required.
   * @param offset                   The number of items to skip before the first in the response.
   *                                                    The default is 0.
   * @param limit                    The maximum number of items to be returned in the response.
   *                                                    The default is 50.
   * @param xAkoyaInteractionType    Optional but recommended header to include with each data
   *                                                    request.  Allowed values are `user` or `batch`.  `user`
   *                                                    indicates a request is prompted by an end-user action. `batch`
   *                                                    indicates the request is part of a batch process.
   * @param mode                     BETA. Default is raw. Use standard for FDX-aligned,
   *                                                    standardized data values.
   * @return Response from the API call
   */
  getTransactions(
    version: string,
    providerId: string,
    accountId: string,
    startTime?: string,
    endTime?: string,
    offset?: string,
    limit?: number,
    xAkoyaInteractionType?: InteractionType,
    mode?: Mode,
    requestOptions?: RequestOptions
  ): PagedAsyncIterable<
    TransactionsEntityTransactions,
    LinkPagedResponse<TransactionsEntityTransactions, TransactionsEntity>
  > {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      version: [version, string()],
      providerId: [providerId, string()],
      accountId: [accountId, string()],
      startTime: [startTime, optional(string())],
      endTime: [endTime, optional(string())],
      offset: [offset, optional(string())],
      limit: [limit, optional(number())],
      xAkoyaInteractionType: [
        xAkoyaInteractionType,
        optional(interactionTypeSchema),
      ],
      mode: [mode, optional(modeSchema)],
    });
    req.header('x-akoya-interaction-type', mapped.xAkoyaInteractionType);
    req.query('startTime', mapped.startTime);
    req.query('endTime', mapped.endTime);
    req.query('offset', mapped.offset);
    req.query('limit', mapped.limit);
    req.query('mode', mapped.mode);
    req.appendTemplatePath`/transactions/${pathParam(
      mapped.version,
      'version'
    )}/${pathParam(mapped.providerId, 'providerId')}/${pathParam(
      mapped.accountId,
      'accountId'
    )}`;
    req.throwOn(400, ErrorError, 'Bad Request');
    req.throwOn(401, ErrorError, 'Customer not authorized.');
    req.throwOn(
      404,
      ErrorError,
      '701 - Tax Lots not found. The `holdingId` may be wrong.'
    );
    req.throwOn(405, ApiError, 'Method Not Allowed');
    req.throwOn(406, ErrorError, 'Content Type not Supported');
    req.throwOn(
      408,
      ErrorError,
      'Request timed out (round trip call took >10 seconds).'
    );
    req.throwOn(429, ErrorError, '1207 - Too many requests');
    req.throwOn(
      500,
      ErrorError,
      'Catch-all exception where request was not processed due to an internal outage/issue.'
    );
    req.throwOn(501, ErrorError, 'FdxVersion in header is not implemented.');
    req.throwOn(503, ErrorError, 'System is down for maintenance.');
    req.authenticate([{ acgAuth: true }]);
    return req.paginate(
      createPagedData(
        (req) => req.callAsJson(transactionsEntitySchema, requestOptions),
        createLinkPagedResponse,
        (res) => res.result.transactions,
        new LinkPagination('$response.body#/links/next/href')
      )
    );
  }
}
