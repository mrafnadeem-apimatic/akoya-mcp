/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import {
  AkoyaAccountInfoProduct,
  akoyaAccountInfoProductSchema,
} from '../models/akoyaAccountInfoProduct.js';
import {
  InteractionType,
  interactionTypeSchema,
} from '../models/interactionType.js';
import { Mode, modeSchema } from '../models/mode.js';
import { optional, string } from '../schema.js';
import { BaseApi } from './baseApi.js';
import { ApiError } from '@apimatic/core';
import { ErrorError } from '../errors/errorError.js';

export class AccountInformationApi extends BaseApi {
  /**
   * Get basic account information including accountId, masked account number, type, description, etc.
   *
   * To view the response schema, select the `200` response below. Then pick an option for annuity,
   * deposit, insurance, investment, loan, and line of credit account types.
   *
   * For an example payload response, see the `200` example response below the `Try it` feature. The
   * example is from a deposit account but all account types are supported by this endpoint.
   *
   * > ðŸ›‘
   * >
   * > The *id_token* should be used as the bearer token with this call.
   *
   * Use the `mode` query param to receive FDX-aligned, standardized data values (Beta). For example:
   *
   * `https://sandbox-products.ddp.akoya.com/accounts-info/v2/mikomo?mode=standard`
   *
   * `mode` is available in both sandbox and production.
   *
   * `mode` is supported by a subset of providers. Log into the [Data Recipient Hub](https://recipient.
   * ddp.akoya.com/login) and click [here](https://recipient.ddp.akoya.
   * com/support/article/kA0Uw00000015GzKAI) to view a list of all providers supporting the `mode`
   * parameter.
   *
   *
   *
   * @param version                  Akoya major version number. Do not use minor version numbers.
   *                                                    For instance, use v2 and not v2.2
   * @param providerId               Id of provider
   * @param xAkoyaInteractionType    Optional but recommended header to include with each data
   *                                                    request.  Allowed values are `user` or `batch`.  `user`
   *                                                    indicates a request is prompted by an end-user action. `batch`
   *                                                    indicates the request is part of a batch process.
   * @param mode                     BETA. Default is raw. Use standard for FDX-aligned,
   *                                                    standardized data values.
   * @param accountIds               Comma separated list of account ids
   * @return Response from the API call
   */
  async getAccountsInfo(
    version: string,
    providerId: string,
    xAkoyaInteractionType?: InteractionType,
    mode?: Mode,
    accountIds?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AkoyaAccountInfoProduct>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      version: [version, string()],
      providerId: [providerId, string()],
      xAkoyaInteractionType: [
        xAkoyaInteractionType,
        optional(interactionTypeSchema),
      ],
      mode: [mode, optional(modeSchema)],
      accountIds: [accountIds, optional(string())],
    });
    req.header('x-akoya-interaction-type', mapped.xAkoyaInteractionType);
    req.query('mode', mapped.mode);
    req.query('accountIds', mapped.accountIds);
    req.appendTemplatePath`/accounts-info/${mapped.version}/${mapped.providerId}`;
    req.throwOn(400, ErrorError, 'Invalid Input');
    req.throwOn(401, ErrorError, 'Customer not authorized.');
    req.throwOn(
      404,
      ErrorError,
      '701 - Tax Lots not found. The `holdingId` may be wrong.'
    );
    req.throwOn(405, ApiError, 'Method Not Allowed');
    req.throwOn(406, ErrorError, 'Content Type not Supported');
    req.throwOn(
      408,
      ErrorError,
      'Request timed out (round trip call took >10 seconds).'
    );
    req.throwOn(429, ErrorError, '1207 - Too many requests');
    req.throwOn(
      500,
      ErrorError,
      'Catch-all exception where request was not processed due to an internal outage/issue.'
    );
    req.throwOn(501, ErrorError, 'FdxVersion in header is not implemented.');
    req.throwOn(503, ErrorError, 'System is down for maintenance.');
    req.authenticate([{ acgAuth: true }]);
    return req.callAsJson(akoyaAccountInfoProductSchema, requestOptions);
  }
}
