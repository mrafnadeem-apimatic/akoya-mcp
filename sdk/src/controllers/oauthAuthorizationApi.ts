/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import { OauthToken, oauthTokenSchema } from '../models/oauthToken.js';
import { string } from '../schema.js';
import { BaseApi } from './baseApi.js';
import { OauthProviderError } from '../errors/oauthProviderError.js';

export class OauthAuthorizationApi extends BaseApi {
  /**
   * Create a new OAuth 2 token.
   *
   * @param authorization Authorization header in Basic auth format
   * @param code          Authorization Code
   * @param redirectUri   Redirect Uri
   * @return Response from the API call
   */
  async requestToken(
    authorization: string,
    code: string,
    redirectUri: string,
    fieldParameters?: Record<string, unknown>,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<OauthToken>> {
    const req = this.createRequest('POST', '/token');
    req.baseUrl('auth server');
    const mapped = req.prepareArgs({
      authorization: [authorization, string()],
      code: [code, string()],
      redirectUri: [redirectUri, string()],
    });
    req.header('Authorization', mapped.authorization);
    req.form({
      grant_type: 'authorization_code',
      code: mapped.code,
      redirect_uri: mapped.redirectUri,
      ...fieldParameters,
    });
    req.throwOn(400, OauthProviderError, 'OAuth 2 provider returned an error.');
    req.throwOn(
      401,
      OauthProviderError,
      'OAuth 2 provider says client authentication failed.'
    );
    req.authenticate(false);
    return req.callAsJson(oauthTokenSchema, requestOptions);
  }

  /**
   * Obtain a new access token using a refresh token
   *
   * @param refreshToken  Refresh token
   * @param clientId      Client Id
   * @param clientSecret  client Secret
   * @return Response from the API call
   */
  async refreshToken(
    refreshToken: string,
    clientId: string,
    clientSecret: string,
    fieldParameters?: Record<string, unknown>,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<OauthToken>> {
    const req = this.createRequest('POST', '/token');
    req.baseUrl('auth server');
    const mapped = req.prepareArgs({
      refreshToken: [refreshToken, string()],
      clientId: [clientId, string()],
      clientSecret: [clientSecret, string()],
    });
    req.form({
      grant_type: 'refresh_token',
      refresh_token: mapped.refreshToken,
      client_id: mapped.clientId,
      client_secret: mapped.clientSecret,
      ...fieldParameters,
    });
    req.throwOn(400, OauthProviderError, 'OAuth 2 provider returned an error.');
    req.throwOn(
      401,
      OauthProviderError,
      'OAuth 2 provider says client authentication failed.'
    );
    req.authenticate(false);
    return req.callAsJson(oauthTokenSchema, requestOptions);
  }

  /**
   * Revokes an access token, invalidating it so that it can no longer be used to access resources.
   *
   * @param refreshToken    Refresh token
   * @param clientId        Client Id
   * @param clientSecret    client Secret
   * @return Response from the API call
   */
  async revokeToken(
    refreshToken: string,
    clientId: string,
    clientSecret: string,
    fieldParameters?: Record<string, unknown>,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/revoke');
    req.baseUrl('auth server');
    const mapped = req.prepareArgs({
      refreshToken: [refreshToken, string()],
      clientId: [clientId, string()],
      clientSecret: [clientSecret, string()],
    });
    req.form({
      token_type_hint: 'refresh_token',
      token: mapped.refreshToken,
      client_id: mapped.clientId,
      client_secret: mapped.clientSecret,
      ...fieldParameters,
    });
    req.throwOn(400, OauthProviderError, 'OAuth 2 provider returned an error.');
    req.throwOn(
      401,
      OauthProviderError,
      'OAuth 2 provider says client authentication failed.'
    );
    req.authenticate(false);
    return req.call(requestOptions);
  }
}
