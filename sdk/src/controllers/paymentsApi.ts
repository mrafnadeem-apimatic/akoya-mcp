/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core.js';
import {
  ArrayOfAccountPaymentNetworks,
  arrayOfAccountPaymentNetworksSchema,
} from '../models/arrayOfAccountPaymentNetworks.js';
import {
  InteractionType,
  interactionTypeSchema,
} from '../models/interactionType.js';
import { optional, string } from '../schema.js';
import { BaseApi } from './baseApi.js';
import { ApiError } from '@apimatic/core';
import { ErrorError } from '../errors/errorError.js';

export class PaymentsApi extends BaseApi {
  /**
   * This product supports use cases such as payment enablement or account opening. The response includes
   * identifiers necessary to make ACH and RTP payments. Identifiers include account number, routing
   * number, identifier type (actual or tokenized account number), and payment network type such as ACH
   * or RTP.
   *
   * <br>
   *
   * To see the response schema, select the `200` response below. For an example payload response, see
   * the `200` example response below the *Try it* feature.
   *
   * > ðŸ›‘
   * >
   * > The *id_token* should be used as the bearer token with this call.
   *
   * @param version                  Akoya major version number. Do not use minor version numbers.
   *                                                    For instance, use v2 and not v2.2
   * @param providerId               Id of provider
   * @param accountId                Account Identifier
   * @param xAkoyaInteractionType    Optional but recommended header to include with each data
   *                                                    request.  Allowed values are `user` or `batch`.  `user`
   *                                                    indicates a request is prompted by an end-user action. `batch`
   *                                                    indicates the request is part of a batch process.
   * @return Response from the API call
   */
  async paymentNetworks(
    version: string,
    providerId: string,
    accountId: string,
    xAkoyaInteractionType?: InteractionType,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ArrayOfAccountPaymentNetworks>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      version: [version, string()],
      providerId: [providerId, string()],
      accountId: [accountId, string()],
      xAkoyaInteractionType: [
        xAkoyaInteractionType,
        optional(interactionTypeSchema),
      ],
    });
    req.header('x-akoya-interaction-type', mapped.xAkoyaInteractionType);
    req.appendTemplatePath`/payments/${mapped.version}/${mapped.providerId}/${mapped.accountId}/payment-networks`;
    req.throwOn(401, ErrorError, 'Customer not authorized.');
    req.throwOn(
      403,
      ErrorError,
      'Incorrect providerId or no subscription to provider.'
    );
    req.throwOn(
      404,
      ErrorError,
      '701 - Account not found. The `accountId` may be wrong.'
    );
    req.throwOn(405, ApiError, 'Method Not Allowed');
    req.throwOn(
      408,
      ErrorError,
      'Request timed out (round trip call took >10 seconds).'
    );
    req.authenticate([{ acgAuth: true }]);
    return req.callAsJson(arrayOfAccountPaymentNetworksSchema, requestOptions);
  }
}
