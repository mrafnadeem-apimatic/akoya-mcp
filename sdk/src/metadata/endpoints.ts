/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { CoreClient } from '@apimatic/metadata-interfaces';
import { Client } from '../client.js';
import { createConfigurationFromEnvironment } from '../configuration.js';
import { AccountInformationApi } from '../controllers/accountInformationApi.js';
import { BalancesApi } from '../controllers/balancesApi.js';
import { CustomersApi } from '../controllers/customersApi.js';
import { InvestmentsApi } from '../controllers/investmentsApi.js';
import { OauthAuthorizationApi } from '../controllers/oauthAuthorizationApi.js';
import { PaymentsApi } from '../controllers/paymentsApi.js';
import { StatementsApi } from '../controllers/statementsApi.js';
import { TaxBetaApi } from '../controllers/taxBetaApi.js';
import { TransactionsApi } from '../controllers/transactionsApi.js';
import { EndpointMetadata, RequestSchema } from './endpointMetadata.js';
import * as accountInformationApiSchemas from './endpointSchemas/accountInformationApiSchemas.js';
import * as balancesApiSchemas from './endpointSchemas/balancesApiSchemas.js';
import * as customersApiSchemas from './endpointSchemas/customersApiSchemas.js';
import * as investmentsApiSchemas from './endpointSchemas/investmentsApiSchemas.js';
import * as oauthAuthorizationApiSchemas from './endpointSchemas/oauthAuthorizationApiSchemas.js';
import * as paymentsApiSchemas from './endpointSchemas/paymentsApiSchemas.js';
import * as statementsApiSchemas from './endpointSchemas/statementsApiSchemas.js';
import * as taxBetaApiSchemas from './endpointSchemas/taxBetaApiSchemas.js';
import * as transactionsApiSchemas from './endpointSchemas/transactionsApiSchemas.js';

export const endpoints = {
  'Account information-get-accounts-info': new EndpointMetadata(
    'get-accounts-info',
    'Account information',
    new RequestSchema(
      accountInformationApiSchemas.getAccountsInfoMetadataRequestSchema
    ),
    (client, mapped) =>
      new AccountInformationApi(client).getAccountsInfo(
        mapped.version,
        mapped.providerId,
        mapped.xAkoyaInteractionType,
        mapped.mode,
        mapped.accountIds
      ),
    'Get basic account information including accountId, masked account number, type, description, etc.\\n\\nTo view the response schema, select the `200` response below. Then pick an option for annuity, deposit, insurance, investment, loan, and line of credit account types. \\n\\nFor an example payload response, see the `200` example response below the `Try it` feature. The example is from a deposit account but all account types are supported by this endpoint.\\n\\n> ðŸ›‘\\n> \\n> The *id_token* should be used as the bearer token with this call.\\n\\nUse the `mode` query param to receive FDX-aligned, standardized data values (Beta). For example:\\n\\n`https://sandbox-products.ddp.akoya.com/accounts-info/v2/mikomo?mode=standard`\\n\\n`mode` is available in both sandbox and production.\\n\\n`mode` is supported by a subset of providers. Log into the [Data Recipient Hub](https://recipient.ddp.akoya.com/login) and click [here](https://recipient.ddp.akoya.com/support/article/kA0Uw00000015GzKAI) to view a list of all providers supporting the `mode` parameter.\\n\\n'
  ),
  'Balances-get-balances': new EndpointMetadata(
    'get-balances',
    'Balances',
    new RequestSchema(balancesApiSchemas.getBalancesMetadataRequestSchema),
    (client, mapped) =>
      new BalancesApi(client).getBalances(
        mapped.version,
        mapped.providerId,
        mapped.xAkoyaInteractionType,
        mapped.mode,
        mapped.accountIds
      ),
    'Account information that includes balances and rates of bank accounts, credit cards, loans, investments, and more.\\n\\nTo view the response schema, select the `200` response below. Then pick an option for annuity, deposit, insurance, investment, loan, and line of credit account types. \\n\\nFor an example payload response, see the `200` example response below the `Try it` feature. The example is from a deposit account but all account types are supported by this endpoint.\\n\\n> ðŸ›‘\\n> \\n> The *id_token* should be used as the bearer token with this call.\\n\\nUse the `mode` query param to receive FDX-aligned, standardized data values (Beta). For example:\\n\\n`https://sandbox-products.ddp.akoya.com/balances/v2/mikomo?mode=standard`\\n\\n`mode` is available in both sandbox and production.\\n\\n`mode` is supported by a subset of providers. Log into the [Data Recipient Hub](https://recipient.ddp.akoya.com/login) and click [here](https://recipient.ddp.akoya.com/support/article/kA0Uw00000015GzKAI) to view a list of all providers supporting the `mode` parameter.'
  ),
  'Customers-customer-info': new EndpointMetadata(
    'customer-info',
    'Customers',
    new RequestSchema(customersApiSchemas.customerInfoMetadataRequestSchema),
    (client, mapped) =>
      new CustomersApi(client).customerInfo(
        mapped.version,
        mapped.providerId,
        mapped.xAkoyaInteractionType
      ),
    'This product supports use cases such as payment enablement, account opening, and identity verification. Responses return information about the authorized end-user, the customer associated with the `id_token` used in the call. This information may include, but is not limited to, the customer identifier, name, email, address, and phone number.\\n\\n<br>\\n\\nTo see the response schema, select the `200` response below. For an example payload response, see the `200` example response below the *Try it* feature. \\n\\nThis product requires consumer consent to share all account holder information.\\n\\n> ðŸ›‘ The `id_token` should be used as the bearer token with this call.\\n>'
  ),
  'Customers-get-account-holder': new EndpointMetadata(
    'get-account-holder',
    'Customers',
    new RequestSchema(
      customersApiSchemas.getAccountHolderMetadataRequestSchema
    ),
    (client, mapped) =>
      new CustomersApi(client).getAccountHolder(
        mapped.accountId,
        mapped.version,
        mapped.providerId,
        mapped.xAkoyaInteractionType
      ),
    'This product supports use cases such as payment enablement, account opening, identity verification,or lending & credit enhancement. Responses return information about the authorized consumer, the customer associated with the `id_token` used in the call, and the relationship specific to the provided `accountId`.\\n\\n> ðŸ“Œ Please note!\\n>\\n> This endpoint provides additional information which may not be required for your use case, making it inefficient compared to the [/customer info](https://docs.akoya.com/reference/customer-info) endpoint. Please refer to to the [Customers guide](https://docs.akoya.com/reference/customers) for more information about this endpoint.\\n\\nGet account holder information. Based on FDX 5.2.1.\\n\\nThis product requires consumer consent to share all account holder information.\\n\\n> ðŸ›‘ The `id_token` should be used as the bearer token with this call.\\n> \\n'
  ),
  'Investments-get-accounts': new EndpointMetadata(
    'get-accounts',
    'Investments',
    new RequestSchema(investmentsApiSchemas.getAccountsMetadataRequestSchema),
    (client, mapped) =>
      new InvestmentsApi(client).getAccounts(
        mapped.version,
        mapped.providerId,
        mapped.xAkoyaInteractionType,
        mapped.mode,
        mapped.accountIds
      ),
    'Get detailed account information that includes Akoya products Account Info and Balances for all account types (annunity, deposit, insurance, investments, line of credit, and loan) and adds the Investments product to investment accounts including contributions, holdings, vesting information, and more.\\n\\nTo view the response schema, select the `200` response below. Then pick an option for annuity, deposit, insurance, investment, loan, and line of credit account types. \\n\\nFor an example payload response, see the `200` example response below the `Try it` feature. The example is from an investment account but all account types are supported and returned by this endpoint.\\n\\n> ðŸ›‘\\n> \\n> The *id_token* should be used as the bearer token with this call.\\n\\nUse the `mode` query param to receive FDX-aligned, standardized data values (Beta). For example:\\n\\n`https://sandbox-products.ddp.akoya.com/accounts/v2/mikomo?mode=standard`\\n\\n`mode` is available in both sandbox and production.\\n\\n`mode` is supported by a subset of providers. Log into the [Data Recipient Hub](https://recipient.ddp.akoya.com/login) and click [here](https://recipient.ddp.akoya.com/support/article/kA0Uw00000015GzKAI) to view a list of all providers supporting the `mode` parameter.'
  ),
  'Investments-get-taxlots': new EndpointMetadata(
    'get-taxlots',
    'Investments',
    new RequestSchema(investmentsApiSchemas.getTaxlotsMetadataRequestSchema),
    (client, mapped) =>
      new InvestmentsApi(client).getTaxlots(
        mapped.version,
        mapped.providerId,
        mapped.accountId,
        mapped.holdingId,
        mapped.xAkoyaInteractionType,
        mapped.offset,
        mapped.limit,
        mapped.accountIds
      ),
    'The taxlots API allows you to retrieve tax lots of consumer-permissioned accounts.\\n\\n> ðŸ›‘\\n> \\n> The *id_token* should be used as the bearer token with this call.'
  ),
  'Payments-payment-networks': new EndpointMetadata(
    'payment-networks',
    'Payments',
    new RequestSchema(paymentsApiSchemas.paymentNetworksMetadataRequestSchema),
    (client, mapped) =>
      new PaymentsApi(client).paymentNetworks(
        mapped.version,
        mapped.providerId,
        mapped.accountId,
        mapped.xAkoyaInteractionType
      ),
    'This product supports use cases such as payment enablement or account opening. The response includes identifiers necessary to make ACH and RTP payments. Identifiers include account number, routing number, identifier type (actual or tokenized account number), and payment network type such as ACH or RTP.\\n\\n<br>\\n\\nTo see the response schema, select the `200` response below. For an example payload response, see the `200` example response below the *Try it* feature. \\n\\n> ðŸ›‘\\n> \\n> The *id_token* should be used as the bearer token with this call.'
  ),
  'Statements-get-statement-list': new EndpointMetadata(
    'get-statement-list',
    'Statements',
    new RequestSchema(
      statementsApiSchemas.getStatementListMetadataRequestSchema
    ),
    (client, mapped) =>
      new StatementsApi(client).getStatementList(
        mapped.accountId,
        mapped.version,
        mapped.providerId,
        mapped.startTime,
        mapped.endTime,
        mapped.offset,
        mapped.limit,
        mapped.xAkoyaInteractionType
      ),
    "Retrieve a list of available statements for the end-user's consented accounts. You may request a date range of up to two years of historical statements (maximum date ranges vary by provider).\\n\\nThe paginated response includes an array of statement information with the end-user's account id and statement details such as statement id, date, description, and status. The results also include links to GET the statement image."
  ),
  'Statements-get-statements': new EndpointMetadata(
    'get-statements',
    'Statements',
    new RequestSchema(statementsApiSchemas.getStatementsMetadataRequestSchema),
    (client, mapped) =>
      new StatementsApi(client).getStatements(
        mapped.accountId,
        mapped.version,
        mapped.providerId,
        mapped.statementId,
        mapped.accept,
        mapped.xAkoyaInteractionType
      ),
    'Retrieve a specific account statement file. Use [HTTP Accept request-header](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html) to specify desired content types. \\n\\nFor the initial launch, only PDF statements are supported. PDFs are returned in the response.\\n\\n### cURL request\\n\\nWe recommend using the auto-generated cURL request with the {idToken}, accountId, providerId, statementId, and version with an added cURL parameter to return the output to a file. For example:\\n\\n```curl\\ncurl --request GET --url https://sandbox-products.ddp.akoya.com/statements/v2/mikomo/513815781465/P9CvLPKDaFRMbNDkhu1 --header \\"accept: application/pdf\\" --header \\"authorization: Bearer {idtoken}\\" --output example.pdf\\n```'
  ),
  'Tax (beta)-taxFormsSearch': new EndpointMetadata(
    'taxFormsSearch',
    'Tax (beta)',
    new RequestSchema(taxBetaApiSchemas.taxFormsSearchMetadataRequestSchema),
    (client, mapped) =>
      new TaxBetaApi(client).taxFormsSearch(
        mapped.version,
        mapped.providerId,
        mapped.xAkoyaInteractionId,
        mapped.xAkoyaInteractionType,
        mapped.accept,
        mapped.taxYear,
        mapped.taxForms,
        mapped.accountId
      ),
    'Get the full lists of tax document data and tax form images available for a specific year for the current authorized customer.'
  ),
  'Tax (beta)-getTaxForm': new EndpointMetadata(
    'getTaxForm',
    'Tax (beta)',
    new RequestSchema(taxBetaApiSchemas.getTaxFormMetadataRequestSchema),
    (client, mapped) =>
      new TaxBetaApi(client).getTaxForm(
        mapped.version,
        mapped.providerId,
        mapped.taxFormId,
        mapped.xAkoyaInteractionId,
        mapped.xAkoyaInteractionType,
        mapped.taxDataType,
        mapped.accept
      ),
    'Get the Tax Statement as JSON or PDF for a single tax document for the customer. Use [HTTP Accept request-header](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html) to specify desired content types. See `AcceptHeader` definition for typical values.\\r\\n\\r\\nNot all providers support PDF payloads. See [this article](https://recipient.ddp.akoya.com/support/article/kA0Uw00000026VxKAI) in the Data Recipent Hub for a list of providers that support document PDFs.'
  ),
  'Transactions-get-transactions': new EndpointMetadata(
    'get-transactions',
    'Transactions',
    new RequestSchema(
      transactionsApiSchemas.getTransactionsMetadataRequestSchema
    ),
    async (client, mapped) =>
      {
        const iterable = new TransactionsApi(client).getTransactions(
          mapped.version,
          mapped.providerId,
          mapped.accountId,
          mapped.startTime,
          mapped.endTime,
          mapped.offset,
          mapped.limit,
          mapped.xAkoyaInteractionType,
          mapped.mode
        );
        const pages = [];
        const items = [];
        
        for await (const page of iterable.pages) {
          pages.push(page);

          for (const item of page.items) {
              items.push(item);
          }
        }
        
        return {
          request: pages[pages.length - 1]?.request,
          statusCode: pages[pages.length - 1]?.statusCode,
          headers: pages[pages.length - 1]?.headers,
          result: items,
          body: JSON.stringify(items),
        };
      },
    'The transactions API allows you to retrieve transaction history of consumer-permissioned accounts.\\n\\n> ðŸ›‘\\n> \\n> The *id_token* should be used as the bearer token with this call.\\n\\nFor more information on how to paginate transaction results, please see: [Pagination](https://docs.akoya.com/v2/docs/pagination)\\n\\nUse the `mode` query param to receive FDX-aligned, standardized data values (Beta). For example:\\n\\n`https://sandbox-products.ddp.akoya.com/transactions/v2/mikomo?mode=standard`\\n\\n`mode` is available in both sandbox and production.\\n\\n`mode` is supported by a subset of providers. Log into the [Data Recipient Hub](https://recipient.ddp.akoya.com/login) and click [here](https://recipient.ddp.akoya.com/support/article/kA0Uw00000015GzKAI) to view a list of all providers supporting the `mode` parameter.'
  ),
  'OAuth Authorization-request token': new EndpointMetadata(
    'request token',
    'OAuth Authorization',
    new RequestSchema(
      oauthAuthorizationApiSchemas.requestTokenMetadataRequestSchema
    ),
    (client, mapped) =>
      new OauthAuthorizationApi(client).requestToken(
        mapped.authorization,
        mapped.code,
        mapped.redirectUri
      ),
    'Create a new OAuth 2 token.'
  ),
  'OAuth Authorization-refresh token': new EndpointMetadata(
    'refresh token',
    'OAuth Authorization',
    new RequestSchema(
      oauthAuthorizationApiSchemas.refreshTokenMetadataRequestSchema
    ),
    (client, mapped) =>
      new OauthAuthorizationApi(client).refreshToken(
        mapped.refreshToken,
        mapped.clientId,
        mapped.clientSecret
      ),
    'Obtain a new access token using a refresh token'
  ),
  'OAuth Authorization-revoke token': new EndpointMetadata(
    'revoke token',
    'OAuth Authorization',
    new RequestSchema(
      oauthAuthorizationApiSchemas.revokeTokenMetadataRequestSchema
    ),
    (client, mapped) =>
      new OauthAuthorizationApi(client).revokeToken(
        mapped.refreshToken,
        mapped.clientId,
        mapped.clientSecret
      ),
    'Revokes an access token, invalidating it so that it can no longer be used to access resources.'
  ),
} as const;

export function clientFactory(): CoreClient {
  return new Client(createConfigurationFromEnvironment()) as object as CoreClient;
}