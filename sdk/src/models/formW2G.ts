/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema.js';
import { Error, errorSchema } from './error.js';
import { HateoasLink, hateoasLinkSchema } from './hateoasLink.js';
import {
  StateAndLocalTaxWithholding,
  stateAndLocalTaxWithholdingSchema,
} from './stateAndLocalTaxWithholding.js';
import {
  TaxFormAttribute,
  taxFormAttributeSchema,
} from './taxFormAttribute.js';
import { TaxParty, taxPartySchema } from './taxParty.js';
import { TypeFormType, typeFormTypeSchema } from './typeFormType.js';

/** Certain Gambling Winnings */
export interface FormW2G {
  /** Year for which taxes are being paid */
  taxYear?: number;
  /** True to indicate this is a corrected tax form */
  corrected?: boolean;
  /** Long-term persistent identity of the source account. Not the account number */
  accountId?: string;
  /** Long-term persistent id for this tax form. Depending upon the data provider, this may be the same id as the enclosing tax statement id, or this may be a different id, or this id may be omitted. */
  taxFormId?: string;
  /** Date of production or delivery of the tax form */
  taxFormDate?: string;
  /** Additional explanation text or content about this tax form */
  additionalInformation?: string;
  /** Enumerated name of the tax form entity e.g. "TaxW2" */
  taxFormType?: TypeFormType;
  /** Issuer's name, address, phone, and TIN. Issuer data need only be transmitted on enclosing TaxStatement, if it is the same on all its included tax forms. */
  issuer?: TaxParty;
  /** Recipient's name, address, phone, and TIN. Recipient data need only be transmitted on enclosing TaxStatement, if it is the same on all its included tax forms. */
  recipient?: TaxParty;
  /** Additional attributes for this tax form when defined fields are not available. Some specific additional attributes already defined by providers: Fields required by [IRS FIRE](https://www.irs.gov/e-file-providers/filing-information-returns-electronically-fire): Name Control, Type of Identification Number (EIN, SSN, ITIN, ATIN). (ATIN is tax ID number for pending adoptions.) Tax form provider field for taxpayer notification: Recipient Email Address. */
  attributes?: TaxFormAttribute[];
  /** Present if an error was encountered while retrieving this form */
  error?: Error;
  /** Links to retrieve this form as data or image, or to invoke other APIs */
  links?: HateoasLink[];
  /** Box 1, Reportable winnings */
  winnings?: number;
  /** Box 2, Date won */
  dateWon?: string;
  /** Box 3, Type of wager */
  typeOfWager?: string;
  /** Box 4, Federal income tax withheld */
  federalTaxWithheld?: number;
  /** Box 5, Transaction */
  transaction?: string;
  /** Box 6, Race */
  race?: string;
  /** Box 7, Winnings from identical wagers */
  identicalWinnings?: number;
  /** Box 8, Cashier */
  cashier?: string;
  /** Box 10, Window */
  window?: string;
  /** Box 11, First I.D. */
  firstId?: string;
  /** Box 12, Second I.D. */
  secondId?: string;
  /** Boxes 13-18, State and Local tax withholding, use income fields for state (box 14) and local (box 16) winnings amounts */
  stateAndLocal?: StateAndLocalTaxWithholding[];
  additionalProperties?: Record<string, unknown>;
}

export const formW2GSchema: Schema<FormW2G> = typedExpandoObject(
  {
    taxYear: ['taxYear', optional(number())],
    corrected: ['corrected', optional(boolean())],
    accountId: ['accountId', optional(string())],
    taxFormId: ['taxFormId', optional(string())],
    taxFormDate: ['taxFormDate', optional(string())],
    additionalInformation: ['additionalInformation', optional(string())],
    taxFormType: ['taxFormType', optional(typeFormTypeSchema)],
    issuer: ['issuer', optional(lazy(() => taxPartySchema))],
    recipient: ['recipient', optional(lazy(() => taxPartySchema))],
    attributes: [
      'attributes',
      optional(array(lazy(() => taxFormAttributeSchema))),
    ],
    error: ['error', optional(lazy(() => errorSchema))],
    links: ['links', optional(array(lazy(() => hateoasLinkSchema)))],
    winnings: ['winnings', optional(number())],
    dateWon: ['dateWon', optional(string())],
    typeOfWager: ['typeOfWager', optional(string())],
    federalTaxWithheld: ['federalTaxWithheld', optional(number())],
    transaction: ['transaction', optional(string())],
    race: ['race', optional(string())],
    identicalWinnings: ['identicalWinnings', optional(number())],
    cashier: ['cashier', optional(string())],
    window: ['window', optional(string())],
    firstId: ['firstId', optional(string())],
    secondId: ['secondId', optional(string())],
    stateAndLocal: [
      'stateAndLocal',
      optional(array(lazy(() => stateAndLocalTaxWithholdingSchema))),
    ],
  },
  'additionalProperties',
  optional(unknown())
);
