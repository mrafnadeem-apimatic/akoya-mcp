/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema.js';
import { Address, addressSchema } from './address.js';
import { Error, errorSchema } from './error.js';
import { HateoasLink, hateoasLinkSchema } from './hateoasLink.js';
import {
  TaxFormAttribute,
  taxFormAttributeSchema,
} from './taxFormAttribute.js';
import { TaxParty, taxPartySchema } from './taxParty.js';
import { TypeFormType, typeFormTypeSchema } from './typeFormType.js';

/** Mortgage Interest Statement */
export interface Form1098 {
  /** Year for which taxes are being paid */
  taxYear?: number;
  /** True to indicate this is a corrected tax form */
  corrected?: boolean;
  /** Long-term persistent identity of the source account. Not the account number */
  accountId?: string;
  /** Long-term persistent id for this tax form. Depending upon the data provider, this may be the same id as the enclosing tax statement id, or this may be a different id, or this id may be omitted. */
  taxFormId?: string;
  /** Date of production or delivery of the tax form */
  taxFormDate?: string;
  /** Additional explanation text or content about this tax form */
  additionalInformation?: string;
  /** Enumerated name of the tax form entity e.g. "TaxW2" */
  taxFormType?: TypeFormType;
  /** Issuer's name, address, phone, and TIN. Issuer data need only be transmitted on enclosing TaxStatement, if it is the same on all its included tax forms. */
  issuer?: TaxParty;
  /** Recipient's name, address, phone, and TIN. Recipient data need only be transmitted on enclosing TaxStatement, if it is the same on all its included tax forms. */
  recipient?: TaxParty;
  /** Additional attributes for this tax form when defined fields are not available. Some specific additional attributes already defined by providers: Fields required by [IRS FIRE](https://www.irs.gov/e-file-providers/filing-information-returns-electronically-fire): Name Control, Type of Identification Number (EIN, SSN, ITIN, ATIN). (ATIN is tax ID number for pending adoptions.) Tax form provider field for taxpayer notification: Recipient Email Address. */
  attributes?: TaxFormAttribute[];
  /** Present if an error was encountered while retrieving this form */
  error?: Error;
  /** Links to retrieve this form as data or image, or to invoke other APIs */
  links?: HateoasLink[];
  /** Box 9, Number of properties securing the mortgage */
  mortgagedProperties?: number;
  /** Box 10, Other (property tax) */
  otherInformation?: string;
  /** Account number */
  accountNumber?: string;
  /** Box 1, Mortgage interest received from borrower */
  mortgageInterest?: number;
  /** Box 2, Outstanding mortgage principal */
  outstandingPrincipal?: number;
  /** Box 3, Mortgage origination date */
  originationDate?: string;
  /** Box 4, Refund of overpaid interest */
  overpaidRefund?: number;
  /** Box 5, Mortgage insurance premiums */
  mortgageInsurance?: number;
  /** Box 6, Points paid on purchase of principal residence */
  pointsPaid?: number;
  /** Box 7, Is address of property securing mortgage same as PAYER'S/BORROWER'S address */
  isPropertyAddressSameAsBorrowerAddress?: boolean;
  /** Box 11, Mortgage acquisition date */
  acquisitionDate?: string;
  /** Box 8, Address of property securing mortgage */
  propertyAddress?: Address;
  /** Box 10, Property tax */
  propertyTax?: number;
  /** Box 8, Description of property securing mortgage, if property securing mortgage has no address */
  propertyDescription?: string;
  additionalProperties?: Record<string, unknown>;
}

export const form1098Schema: Schema<Form1098> = typedExpandoObject(
  {
    taxYear: ['taxYear', optional(number())],
    corrected: ['corrected', optional(boolean())],
    accountId: ['accountId', optional(string())],
    taxFormId: ['taxFormId', optional(string())],
    taxFormDate: ['taxFormDate', optional(string())],
    additionalInformation: ['additionalInformation', optional(string())],
    taxFormType: ['taxFormType', optional(typeFormTypeSchema)],
    issuer: ['issuer', optional(lazy(() => taxPartySchema))],
    recipient: ['recipient', optional(lazy(() => taxPartySchema))],
    attributes: [
      'attributes',
      optional(array(lazy(() => taxFormAttributeSchema))),
    ],
    error: ['error', optional(lazy(() => errorSchema))],
    links: ['links', optional(array(lazy(() => hateoasLinkSchema)))],
    mortgagedProperties: ['mortgagedProperties', optional(number())],
    otherInformation: ['otherInformation', optional(string())],
    accountNumber: ['accountNumber', optional(string())],
    mortgageInterest: ['mortgageInterest', optional(number())],
    outstandingPrincipal: ['outstandingPrincipal', optional(number())],
    originationDate: ['originationDate', optional(string())],
    overpaidRefund: ['overpaidRefund', optional(number())],
    mortgageInsurance: ['mortgageInsurance', optional(number())],
    pointsPaid: ['pointsPaid', optional(number())],
    isPropertyAddressSameAsBorrowerAddress: [
      'isPropertyAddressSameAsBorrowerAddress',
      optional(boolean()),
    ],
    acquisitionDate: ['acquisitionDate', optional(string())],
    propertyAddress: ['propertyAddress', optional(lazy(() => addressSchema))],
    propertyTax: ['propertyTax', optional(number())],
    propertyDescription: ['propertyDescription', optional(string())],
  },
  'additionalProperties',
  optional(unknown())
);
