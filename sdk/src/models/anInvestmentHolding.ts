/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema.js';
import { AssetClassItem, assetClassItemSchema } from './assetClassItem.js';
import { CurrencyEntity, currencyEntitySchema } from './currencyEntity.js';
import {
  DebtSecurityEntity,
  debtSecurityEntitySchema,
} from './debtSecurityEntity.js';
import {
  FiAssetClassItem,
  fiAssetClassItemSchema,
} from './fiAssetClassItem.js';
import {
  FiAttributeEntity,
  fiAttributeEntitySchema,
} from './fiAttributeEntity.js';
import { HeldInAccount, heldInAccountSchema } from './heldInAccount.js';
import { HoldingSubType, holdingSubTypeSchema } from './holdingSubType.js';
import { HoldingType, holdingTypeSchema } from './holdingType.js';
import { Inv401KSurce, inv401KSurceSchema } from './inv401KSurce.js';
import { Items, itemsSchema } from './items.js';
import {
  MutualFundSecurityEntity,
  mutualFundSecurityEntitySchema,
} from './mutualFundSecurityEntity.js';
import {
  OptionSecurityEntity,
  optionSecurityEntitySchema,
} from './optionSecurityEntity.js';
import {
  OtherSecurityEntity,
  otherSecurityEntitySchema,
} from './otherSecurityEntity.js';
import { PositionType, positionTypeSchema } from './positionType.js';
import { SecurityIdType, securityIdTypeSchema } from './securityIdType.js';
import {
  StockSecurityEntity,
  stockSecurityEntitySchema,
} from './stockSecurityEntity.js';
import {
  SweepSecurityEntity,
  sweepSecurityEntitySchema,
} from './sweepSecurityEntity.js';

export interface AnInvestmentHolding {
  /** Percent breakdown by asset class. */
  assetClasses?: AssetClassItem[];
  /** Cost is average of all purchases for holding. */
  averageCost?: boolean;
  /** If true, indicates that this holding is used to maintain proceeds from sales, dividends, and other cash postings to the investment account. */
  cashAccount?: boolean;
  /** Change in current price compared to previous day's close */
  changeInPrice?: number;
  /** Indicates the currency code used by the account. May also include currency rate. */
  currency?: CurrencyEntity;
  currentUnitPrice?: number;
  /** Current unit price as of date */
  currentUnitPriceDate?: string;
  /** Description of the holding */
  description?: string;
  /** For CDs, bonds, and other time-based holdings. */
  expirationDate?: string;
  /** Face value at the time of data retrieved. */
  faceValue?: number;
  /** Percent breakdown by FI-specific asset class percentage breakdown */
  fiAssetClasses?: FiAssetClassItem[];
  fiAttributes?: FiAttributeEntity[];
  /** Sub-account */
  heldInAccount?: HeldInAccount;
  /** Long term persistent identity of the holding */
  holdingId?: string;
  /** Holding name or security name */
  holdingName?: string;
  holdingSubType?: HoldingSubType;
  holdingType?: HoldingType;
  /** Source for money for this security. */
  inv401KSurce?: Inv401KSurce;
  /** Market value at the time of data retrieved */
  marketValue?: number;
  /** Date of original purchase */
  originalPurchaseDate?: string;
  /** LONG, SHORT. */
  positionType?: PositionType;
  /** Price of holding at the time of purchase */
  purchasedPrice?: number;
  /** For CDs, bonds, and other rate based holdings. */
  rate?: number;
  /** Unique identifier of security */
  securityId?: string;
  /** Security identifier type */
  securityIdType?: SecurityIdType;
  /** Ticker / Market symbol */
  symbol?: string;
  /** Breakdown by tax lot. */
  taxLots?: Items[];
  /** Number of shares (with decimals). */
  units?: number;
  /** Information about the mutual fund security specific to the type of security */
  mutualFundSecurity?: MutualFundSecurityEntity;
  /** Information about the option security specific to the type of security */
  optionSecurity?: OptionSecurityEntity;
  /** Information about the security specific to the type of security */
  otherSecurity?: OtherSecurityEntity;
  /** Information about the stock security specific to the type of security */
  stockSecurity?: StockSecurityEntity;
  /** Information about the sweep security specific to the type of security */
  sweepSecurity?: SweepSecurityEntity;
  /** Information about the debt security specific to the type of security */
  debtSecurity?: DebtSecurityEntity;
  additionalProperties?: Record<string, unknown>;
}

export const anInvestmentHoldingSchema: Schema<AnInvestmentHolding> = typedExpandoObject(
  {
    assetClasses: [
      'assetClasses',
      optional(array(lazy(() => assetClassItemSchema))),
    ],
    averageCost: ['averageCost', optional(boolean())],
    cashAccount: ['cashAccount', optional(boolean())],
    changeInPrice: ['changeInPrice', optional(number())],
    currency: ['currency', optional(lazy(() => currencyEntitySchema))],
    currentUnitPrice: ['currentUnitPrice', optional(number())],
    currentUnitPriceDate: ['currentUnitPriceDate', optional(string())],
    description: ['description', optional(string())],
    expirationDate: ['expirationDate', optional(string())],
    faceValue: ['faceValue', optional(number())],
    fiAssetClasses: [
      'fiAssetClasses',
      optional(array(lazy(() => fiAssetClassItemSchema))),
    ],
    fiAttributes: [
      'fiAttributes',
      optional(array(lazy(() => fiAttributeEntitySchema))),
    ],
    heldInAccount: ['heldInAccount', optional(heldInAccountSchema)],
    holdingId: ['holdingId', optional(string())],
    holdingName: ['holdingName', optional(string())],
    holdingSubType: ['holdingSubType', optional(holdingSubTypeSchema)],
    holdingType: ['holdingType', optional(holdingTypeSchema)],
    inv401KSurce: ['inv401kSurce', optional(inv401KSurceSchema)],
    marketValue: ['marketValue', optional(number())],
    originalPurchaseDate: ['originalPurchaseDate', optional(string())],
    positionType: ['positionType', optional(positionTypeSchema)],
    purchasedPrice: ['purchasedPrice', optional(number())],
    rate: ['rate', optional(number())],
    securityId: ['securityId', optional(string())],
    securityIdType: ['securityIdType', optional(securityIdTypeSchema)],
    symbol: ['symbol', optional(string())],
    taxLots: ['taxLots', optional(array(lazy(() => itemsSchema)))],
    units: ['units', optional(number())],
    mutualFundSecurity: [
      'mutualFundSecurity',
      optional(lazy(() => mutualFundSecurityEntitySchema)),
    ],
    optionSecurity: [
      'optionSecurity',
      optional(lazy(() => optionSecurityEntitySchema)),
    ],
    otherSecurity: [
      'otherSecurity',
      optional(lazy(() => otherSecurityEntitySchema)),
    ],
    stockSecurity: [
      'stockSecurity',
      optional(lazy(() => stockSecurityEntitySchema)),
    ],
    sweepSecurity: [
      'sweepSecurity',
      optional(lazy(() => sweepSecurityEntitySchema)),
    ],
    debtSecurity: [
      'debtSecurity',
      optional(lazy(() => debtSecurityEntitySchema)),
    ],
  },
  'additionalProperties',
  optional(unknown())
);
