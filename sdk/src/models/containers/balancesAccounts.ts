/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { anyOf, isMappedValueValidForSchema, Schema } from '../../schema.js';
import { AnnuityBalance, annuityBalanceSchema } from '../annuityBalance.js';
import { DepositBalance, depositBalanceSchema } from '../depositBalance.js';
import {
  InsuranceBalance,
  insuranceBalanceSchema,
} from '../insuranceBalance.js';
import {
  InvestmentBalance,
  investmentBalanceSchema,
} from '../investmentBalance.js';
import { LoanBalance, loanBalanceSchema } from '../loanBalance.js';
import { LocBalance, locBalanceSchema } from '../locBalance.js';

/** This is a container type for any-of types. */
export type BalancesAccounts =
  | DepositBalance
  | LoanBalance
  | LocBalance
  | InvestmentBalance
  | InsuranceBalance
  | AnnuityBalance;

export const balancesAccountsSchema: Schema<BalancesAccounts> = anyOf([
  depositBalanceSchema,
  loanBalanceSchema,
  locBalanceSchema,
  investmentBalanceSchema,
  insuranceBalanceSchema,
  annuityBalanceSchema,
]);

export namespace BalancesAccounts {
  /**
   * Validation method to narrow down union type to DepositBalance type case.
   *
   * This is DepositBalance case.
   */
  export function isDepositBalance(value: unknown): value is DepositBalance {
    return isMappedValueValidForSchema(value, depositBalanceSchema);
  }

  /**
   * Validation method to narrow down union type to LoanBalance type case.
   *
   * This is LoanBalance case.
   */
  export function isLoanBalance(value: unknown): value is LoanBalance {
    return isMappedValueValidForSchema(value, loanBalanceSchema);
  }

  /**
   * Validation method to narrow down union type to LocBalance type case.
   *
   * This is LocBalance case.
   */
  export function isLocBalance(value: unknown): value is LocBalance {
    return isMappedValueValidForSchema(value, locBalanceSchema);
  }

  /**
   * Validation method to narrow down union type to InvestmentBalance type case.
   *
   * This is InvestmentBalance case.
   */
  export function isInvestmentBalance(
    value: unknown
  ): value is InvestmentBalance {
    return isMappedValueValidForSchema(value, investmentBalanceSchema);
  }

  /**
   * Validation method to narrow down union type to InsuranceBalance type case.
   *
   * This is InsuranceBalance case.
   */
  export function isInsuranceBalance(
    value: unknown
  ): value is InsuranceBalance {
    return isMappedValueValidForSchema(value, insuranceBalanceSchema);
  }

  /**
   * Validation method to narrow down union type to AnnuityBalance type case.
   *
   * This is AnnuityBalance case.
   */
  export function isAnnuityBalance(value: unknown): value is AnnuityBalance {
    return isMappedValueValidForSchema(value, annuityBalanceSchema);
  }
}
