/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema.js';
import {
  AccountInfoStatus,
  accountInfoStatusSchema,
} from './accountInfoStatus.js';
import {
  AnInvestmentHolding,
  anInvestmentHoldingSchema,
} from './anInvestmentHolding.js';
import { BalanceType, balanceTypeSchema } from './balanceType.js';
import {
  ContributionEntity,
  contributionEntitySchema,
} from './contributionEntity.js';
import { CurrencyEntity, currencyEntitySchema } from './currencyEntity.js';
import { EquityGrant, equityGrantSchema } from './equityGrant.js';
import {
  FiAttributeEntity,
  fiAttributeEntitySchema,
} from './fiAttributeEntity.js';
import {
  InterestRateType,
  interestRateTypeSchema,
} from './interestRateType.js';
import {
  InvestmentBalanceList,
  investmentBalanceListSchema,
} from './investmentBalanceList.js';
import {
  InvestmentLoanEntity,
  investmentLoanEntitySchema,
} from './investmentLoanEntity.js';
import { OpenOrderEntity, openOrderEntitySchema } from './openOrderEntity.js';
import {
  PensionSourceEntity,
  pensionSourceEntitySchema,
} from './pensionSourceEntity.js';
import { VestingEntity, vestingEntitySchema } from './vestingEntity.js';

/** Data elements included with the investment product */
export interface InvestmentAccountWithAllDetails {
  /** Long-term persistent identity of the account. Not an account number. This identity must be unique to the owning institution. */
  accountId?: string;
  /** The type of an account. For instance, CHECKING, SAVINGS, 401K, etc. */
  accountType?: string;
  /** Account display number for the end user’s handle at owning institution. This is to be displayed by the Interface Provider. */
  accountNumberDisplay?: string;
  /** Indicates the currency code used by the account. May also include currency rate. */
  currency?: CurrencyEntity;
  description?: string;
  fiAttributes?: FiAttributeEntity[];
  /** Name given by the user. Used in UIs to assist in account selection */
  nickname?: string;
  /** Marketed product name for this account.  Used in UIs to assist in account selection */
  productName?: string;
  /** The status of an account. */
  status?: AccountInfoStatus;
  /** The line of business, such as consumer, consumer joint, small business, corporate, etc. */
  lineOfBusiness?: string;
  /** ASSET (positive transaction amount increases balance), LIABILITY (positive transaction amount decreases balance) */
  balanceType?: BalanceType;
  /** Interest Rate of Account */
  interestRate?: number;
  /** The type of interest rate. FIXED or VARIABLE. */
  interestRateType?: InterestRateType;
  /** Date of account’s interest rate */
  interestRateAsOf?: string;
  /** Date that last transaction occurred on account */
  lastActivityDate?: string;
  /** MICR Number */
  micrNumber?: string;
  /** Long-term persistent identity of the parent account. This is used to group accounts. */
  parentAccountId?: string;
  /** Previous Interest Rate of Account */
  priorInterestRate?: number;
  /** Account is eligible for incoming transfers */
  transferIn?: boolean;
  /** Account is eligible for outgoing transfers */
  transferOut?: boolean;
  /** Check writing privileges */
  allowedCheckWriting?: boolean;
  /** Allowed to trade options */
  allowedOptionTrade?: boolean;
  /** Unique identifier FI */
  brokerId?: string;
  /** Date for this calendar year for 401K account */
  calendarYearFor401K?: string;
  /** Name of the employer in investment 401k Plan */
  employerName?: string;
  /** Margin trading is allowed */
  margin?: boolean;
  /** Plan number for Investment 401k plan */
  planId?: string;
  /** Cash balance across all sub-accounts. Should include sweep funds. */
  availableCashBalance?: number;
  /** As-of date of balances */
  balanceAsOf?: string;
  /** Balance List. Name value pair aggregate. */
  balanceList?: InvestmentBalanceList[];
  /** Total current value of all investments */
  currentValue?: number;
  /** Daily change */
  dailyChange?: number;
  /** Margin balance */
  marginBalance?: number;
  /** Percentage change */
  percentageChange?: number;
  /** Rollover amount */
  rolloverAmount?: number;
  /** Short balance */
  shortBalance?: number;
  /** Array of holdings */
  holdings?: AnInvestmentHolding[];
  /** Array of open orders */
  openOrders?: OpenOrderEntity[];
  /** Array of contribution objects. Describes how new contributions are distributed among the available securities */
  contribution?: ContributionEntity[];
  /** Array of vesting objects. Provides the past, present, and future vesting schedule and percentages */
  vesting?: VestingEntity[];
  /** Array of investment loans */
  investmentLoans?: InvestmentLoanEntity[];
  /** Array of Pension Source */
  pensionSource?: PensionSourceEntity[];
  /** Provides equity grant information on Restricted Stock Units, Restricted Stock Awards, Stock Appreciation Right, Stock Options, Performance Awards, and Total Share Return Units */
  equityGrants?: EquityGrant[];
  additionalProperties?: Record<string, unknown>;
}

export const investmentAccountWithAllDetailsSchema: Schema<InvestmentAccountWithAllDetails> = typedExpandoObject(
  {
    accountId: ['accountId', optional(string())],
    accountType: ['accountType', optional(string())],
    accountNumberDisplay: ['accountNumberDisplay', optional(string())],
    currency: ['currency', optional(lazy(() => currencyEntitySchema))],
    description: ['description', optional(string())],
    fiAttributes: [
      'fiAttributes',
      optional(array(lazy(() => fiAttributeEntitySchema))),
    ],
    nickname: ['nickname', optional(string())],
    productName: ['productName', optional(string())],
    status: ['status', optional(accountInfoStatusSchema)],
    lineOfBusiness: ['lineOfBusiness', optional(string())],
    balanceType: ['balanceType', optional(balanceTypeSchema)],
    interestRate: ['interestRate', optional(number())],
    interestRateType: ['interestRateType', optional(interestRateTypeSchema)],
    interestRateAsOf: ['interestRateAsOf', optional(string())],
    lastActivityDate: ['lastActivityDate', optional(string())],
    micrNumber: ['micrNumber', optional(string())],
    parentAccountId: ['parentAccountId', optional(string())],
    priorInterestRate: ['priorInterestRate', optional(number())],
    transferIn: ['transferIn', optional(boolean())],
    transferOut: ['transferOut', optional(boolean())],
    allowedCheckWriting: ['allowedCheckWriting', optional(boolean())],
    allowedOptionTrade: ['allowedOptionTrade', optional(boolean())],
    brokerId: ['brokerId', optional(string())],
    calendarYearFor401K: ['calendarYearFor401K', optional(string())],
    employerName: ['employerName', optional(string())],
    margin: ['margin', optional(boolean())],
    planId: ['planId', optional(string())],
    availableCashBalance: ['availableCashBalance', optional(number())],
    balanceAsOf: ['balanceAsOf', optional(string())],
    balanceList: [
      'balanceList',
      optional(array(lazy(() => investmentBalanceListSchema))),
    ],
    currentValue: ['currentValue', optional(number())],
    dailyChange: ['dailyChange', optional(number())],
    marginBalance: ['marginBalance', optional(number())],
    percentageChange: ['percentageChange', optional(number())],
    rolloverAmount: ['rolloverAmount', optional(number())],
    shortBalance: ['shortBalance', optional(number())],
    holdings: [
      'holdings',
      optional(array(lazy(() => anInvestmentHoldingSchema))),
    ],
    openOrders: [
      'openOrders',
      optional(array(lazy(() => openOrderEntitySchema))),
    ],
    contribution: [
      'contribution',
      optional(array(lazy(() => contributionEntitySchema))),
    ],
    vesting: ['vesting', optional(array(lazy(() => vestingEntitySchema)))],
    investmentLoans: [
      'investmentLoans',
      optional(array(lazy(() => investmentLoanEntitySchema))),
    ],
    pensionSource: [
      'pensionSource',
      optional(array(lazy(() => pensionSourceEntitySchema))),
    ],
    equityGrants: [
      'equityGrants',
      optional(array(lazy(() => equityGrantSchema))),
    ],
  },
  'additionalProperties',
  optional(unknown())
);
