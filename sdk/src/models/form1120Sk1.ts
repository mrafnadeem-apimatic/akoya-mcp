/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema.js';
import { CodeAndAmount, codeAndAmountSchema } from './codeAndAmount.js';
import {
  DescriptionAndAmount,
  descriptionAndAmountSchema,
} from './descriptionAndAmount.js';
import { Error, errorSchema } from './error.js';
import { HateoasLink, hateoasLinkSchema } from './hateoasLink.js';
import {
  TaxFormAttribute,
  taxFormAttributeSchema,
} from './taxFormAttribute.js';
import { TaxParty, taxPartySchema } from './taxParty.js';
import { TypeFormType, typeFormTypeSchema } from './typeFormType.js';

/** Shareholder's Share of Income, Deductions, Credits, etc. */
export interface Form1120SK1 {
  /** Year for which taxes are being paid */
  taxYear?: number;
  /** True to indicate this is a corrected tax form */
  corrected?: boolean;
  /** Long-term persistent identity of the source account. Not the account number */
  accountId?: string;
  /** Long-term persistent id for this tax form. Depending upon the data provider, this may be the same id as the enclosing tax statement id, or this may be a different id, or this id may be omitted. */
  taxFormId?: string;
  /** Date of production or delivery of the tax form */
  taxFormDate?: string;
  /** Additional explanation text or content about this tax form */
  additionalInformation?: string;
  /** Enumerated name of the tax form entity e.g. "TaxW2" */
  taxFormType?: TypeFormType;
  /** Issuer's name, address, phone, and TIN. Issuer data need only be transmitted on enclosing TaxStatement, if it is the same on all its included tax forms. */
  issuer?: TaxParty;
  /** Recipient's name, address, phone, and TIN. Recipient data need only be transmitted on enclosing TaxStatement, if it is the same on all its included tax forms. */
  recipient?: TaxParty;
  /** Additional attributes for this tax form when defined fields are not available. Some specific additional attributes already defined by providers: Fields required by [IRS FIRE](https://www.irs.gov/e-file-providers/filing-information-returns-electronically-fire): Name Control, Type of Identification Number (EIN, SSN, ITIN, ATIN). (ATIN is tax ID number for pending adoptions.) Tax form provider field for taxpayer notification: Recipient Email Address. */
  attributes?: TaxFormAttribute[];
  /** Present if an error was encountered while retrieving this form */
  error?: Error;
  /** Links to retrieve this form as data or image, or to invoke other APIs */
  links?: HateoasLink[];
  /** Final K-1 */
  finalK1?: boolean;
  /** Amended K-1 */
  amendedK1?: boolean;
  /** Fiscal year begin date */
  fiscalYearBegin?: string;
  /** Fiscal year end date */
  fiscalYearEnd?: string;
  /** Box C, IRS Center where corporation filed return */
  irsCenter?: string;
  /** Box D, Corporation's total number of shares, Beginning of tax year */
  corporationBeginningShares?: number;
  /** Box D, Corporation's total number of shares, End of tax year */
  corporationEndingShares?: number;
  /** Box G, Current year allocation percentage */
  percentOwnership?: number;
  /** Box H, Shareholder's number of shares, Beginning of tax year */
  beginningShares?: number;
  /** Box H, Shareholder's number of shares, End of tax year */
  endingShares?: number;
  /** Box I, Loans from shareholder, Beginning of tax year */
  beginningLoans?: number;
  /** Box I, Loans from shareholder, Ending of tax year */
  endingLoans?: number;
  /** Box 1, Ordinary business income (loss) */
  ordinaryIncome?: number;
  /** Box 2, Net rental real estate income (loss) */
  netRentalRealEstateIncome?: number;
  /** Box 3, Other net rental income (loss) */
  otherRentalIncome?: number;
  /** Box 4, Interest income */
  interestIncome?: number;
  /** Box 5a, Ordinary dividends */
  ordinaryDividends?: number;
  /** Box 5b, Qualified dividends */
  qualifiedDividends?: number;
  /** Box 6, Royalties */
  royalties?: number;
  /** Box 7, Net short-term capital gain (loss) */
  netShortTermGain?: number;
  /** Box 8a, Net long-term capital gain (loss) */
  netLongTermGain?: number;
  /** Box 8b, Collectibles (28%) gain (loss) */
  collectiblesGain?: number;
  /** Box 8c, Unrecaptured section 1250 gain */
  unrecaptured1250Gain?: number;
  /** Box 9, Net section 1231 gain (loss) */
  net1231Gain?: number;
  /** Box 10, Other income (loss) */
  otherIncome?: DescriptionAndAmount[];
  /** Box 11, Section 179 deduction */
  section179Deduction?: number;
  /** Box 12, Other deductions */
  otherDeductions?: CodeAndAmount[];
  /** Box 13, Credits */
  credits?: CodeAndAmount[];
  /** Box 14, Schedule K-3 is attached */
  scheduleK3?: boolean;
  /** Box 15, Alternative minimum tax (AMT) items */
  amtItems?: CodeAndAmount[];
  /** Box 16, Items affecting shareholder basis */
  basisItems?: CodeAndAmount[];
  /** Box 17, Other information */
  otherInfo?: CodeAndAmount[];
  /** Box 18, More than one activity for at-risk purposes */
  multipleAtRiskActivities?: boolean;
  /** Box 19, More than one activity for passive activity purposes */
  multiplePassiveActivities?: boolean;
  additionalProperties?: Record<string, unknown>;
}

export const form1120Sk1Schema: Schema<Form1120SK1> = typedExpandoObject(
  {
    taxYear: ['taxYear', optional(number())],
    corrected: ['corrected', optional(boolean())],
    accountId: ['accountId', optional(string())],
    taxFormId: ['taxFormId', optional(string())],
    taxFormDate: ['taxFormDate', optional(string())],
    additionalInformation: ['additionalInformation', optional(string())],
    taxFormType: ['taxFormType', optional(typeFormTypeSchema)],
    issuer: ['issuer', optional(lazy(() => taxPartySchema))],
    recipient: ['recipient', optional(lazy(() => taxPartySchema))],
    attributes: [
      'attributes',
      optional(array(lazy(() => taxFormAttributeSchema))),
    ],
    error: ['error', optional(lazy(() => errorSchema))],
    links: ['links', optional(array(lazy(() => hateoasLinkSchema)))],
    finalK1: ['finalK1', optional(boolean())],
    amendedK1: ['amendedK1', optional(boolean())],
    fiscalYearBegin: ['fiscalYearBegin', optional(string())],
    fiscalYearEnd: ['fiscalYearEnd', optional(string())],
    irsCenter: ['irsCenter', optional(string())],
    corporationBeginningShares: [
      'corporationBeginningShares',
      optional(number()),
    ],
    corporationEndingShares: ['corporationEndingShares', optional(number())],
    percentOwnership: ['percentOwnership', optional(number())],
    beginningShares: ['beginningShares', optional(number())],
    endingShares: ['endingShares', optional(number())],
    beginningLoans: ['beginningLoans', optional(number())],
    endingLoans: ['endingLoans', optional(number())],
    ordinaryIncome: ['ordinaryIncome', optional(number())],
    netRentalRealEstateIncome: [
      'netRentalRealEstateIncome',
      optional(number()),
    ],
    otherRentalIncome: ['otherRentalIncome', optional(number())],
    interestIncome: ['interestIncome', optional(number())],
    ordinaryDividends: ['ordinaryDividends', optional(number())],
    qualifiedDividends: ['qualifiedDividends', optional(number())],
    royalties: ['royalties', optional(number())],
    netShortTermGain: ['netShortTermGain', optional(number())],
    netLongTermGain: ['netLongTermGain', optional(number())],
    collectiblesGain: ['collectiblesGain', optional(number())],
    unrecaptured1250Gain: ['unrecaptured1250Gain', optional(number())],
    net1231Gain: ['net1231Gain', optional(number())],
    otherIncome: [
      'otherIncome',
      optional(array(lazy(() => descriptionAndAmountSchema))),
    ],
    section179Deduction: ['section179Deduction', optional(number())],
    otherDeductions: [
      'otherDeductions',
      optional(array(lazy(() => codeAndAmountSchema))),
    ],
    credits: ['credits', optional(array(lazy(() => codeAndAmountSchema)))],
    scheduleK3: ['scheduleK3', optional(boolean())],
    amtItems: ['amtItems', optional(array(lazy(() => codeAndAmountSchema)))],
    basisItems: [
      'basisItems',
      optional(array(lazy(() => codeAndAmountSchema))),
    ],
    otherInfo: ['otherInfo', optional(array(lazy(() => codeAndAmountSchema)))],
    multipleAtRiskActivities: ['multipleAtRiskActivities', optional(boolean())],
    multiplePassiveActivities: [
      'multiplePassiveActivities',
      optional(boolean()),
    ],
  },
  'additionalProperties',
  optional(unknown())
);
