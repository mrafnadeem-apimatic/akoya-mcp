/**
 * Akoya
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  optional,
  Schema,
  string,
  typedExpandoObject,
  unknown,
} from '../schema.js';
import { Error, errorSchema } from './error.js';
import { HateoasLink, hateoasLinkSchema } from './hateoasLink.js';
import {
  StateAndLocalTaxWithholding,
  stateAndLocalTaxWithholdingSchema,
} from './stateAndLocalTaxWithholding.js';
import {
  TaxFormAttribute,
  taxFormAttributeSchema,
} from './taxFormAttribute.js';
import { TaxParty, taxPartySchema } from './taxParty.js';
import { TypeFormType, typeFormTypeSchema } from './typeFormType.js';

/** Distributions from Pensions, Annuities, Retirement or Profit-Sharing Plans, IRAs, Insurance Contracts, etc. */
export interface Form1099R {
  /** Year for which taxes are being paid */
  taxYear?: number;
  /** True to indicate this is a corrected tax form */
  corrected?: boolean;
  /** Long-term persistent identity of the source account. Not the account number */
  accountId?: string;
  /** Long-term persistent id for this tax form. Depending upon the data provider, this may be the same id as the enclosing tax statement id, or this may be a different id, or this id may be omitted. */
  taxFormId?: string;
  /** Date of production or delivery of the tax form */
  taxFormDate?: string;
  /** Additional explanation text or content about this tax form */
  additionalInformation?: string;
  /** Enumerated name of the tax form entity e.g. "TaxW2" */
  taxFormType?: TypeFormType;
  /** Issuer's name, address, phone, and TIN. Issuer data need only be transmitted on enclosing TaxStatement, if it is the same on all its included tax forms. */
  issuer?: TaxParty;
  /** Recipient's name, address, phone, and TIN. Recipient data need only be transmitted on enclosing TaxStatement, if it is the same on all its included tax forms. */
  recipient?: TaxParty;
  /** Additional attributes for this tax form when defined fields are not available. Some specific additional attributes already defined by providers: Fields required by [IRS FIRE](https://www.irs.gov/e-file-providers/filing-information-returns-electronically-fire): Name Control, Type of Identification Number (EIN, SSN, ITIN, ATIN). (ATIN is tax ID number for pending adoptions.) Tax form provider field for taxpayer notification: Recipient Email Address. */
  attributes?: TaxFormAttribute[];
  /** Present if an error was encountered while retrieving this form */
  error?: Error;
  /** Links to retrieve this form as data or image, or to invoke other APIs */
  links?: HateoasLink[];
  /** Box 10, Amount allocable to IRR within 5 years */
  allocableToIrr?: number;
  /** Box 11, First year of designated Roth contributions. A four-digit year. (Like `TaxYear` definition, but lower minimum since first year of Roth IRAs was 1997) */
  firstYearOfRoth?: number;
  /** Account number */
  recipientAccountNumber?: string;
  /** Box 1, Gross distribution */
  grossDistribution?: number;
  /** Box 2a, Taxable amount */
  taxableAmount?: number;
  /** Box 2b, Taxable amount not determined */
  taxableAmountNotDetermined?: boolean;
  /** Box 2c, Total distribution */
  totalDistribution?: boolean;
  /** Box 3, Capital gain */
  capitalGain?: number;
  /** Box 4, Federal income tax withheld */
  federalTaxWithheld?: number;
  /** Box 5, Employee contributions */
  employeeContributions?: number;
  /** Box 6, Net unrealized appreciation */
  netUnrealizedAppreciation?: number;
  /** Box 7, Distribution codes */
  distributionCodes?: string[];
  /** Box 7b, IRA/SEP/SIMPLE */
  iraSepSimple?: boolean;
  /** Box 8, Other */
  otherAmount?: number;
  /** Box 8, Other percent */
  otherPercent?: number;
  /** Box 9a, Your percent of total distribution */
  yourPercentOfTotal?: number;
  /** Box 9b, Total employee contributions */
  totalEmployeeContributions?: number;
  /** Box 12, FATCA filing requirement */
  foreignAccountTaxCompliance?: boolean;
  /** Box 13, Date of payment */
  dateOfPayment?: string;
  /** Boxes 14-19, State and Local tax withholding */
  stateAndLocal?: StateAndLocalTaxWithholding[];
  additionalProperties?: Record<string, unknown>;
}

export const form1099RSchema: Schema<Form1099R> = typedExpandoObject(
  {
    taxYear: ['taxYear', optional(number())],
    corrected: ['corrected', optional(boolean())],
    accountId: ['accountId', optional(string())],
    taxFormId: ['taxFormId', optional(string())],
    taxFormDate: ['taxFormDate', optional(string())],
    additionalInformation: ['additionalInformation', optional(string())],
    taxFormType: ['taxFormType', optional(typeFormTypeSchema)],
    issuer: ['issuer', optional(lazy(() => taxPartySchema))],
    recipient: ['recipient', optional(lazy(() => taxPartySchema))],
    attributes: [
      'attributes',
      optional(array(lazy(() => taxFormAttributeSchema))),
    ],
    error: ['error', optional(lazy(() => errorSchema))],
    links: ['links', optional(array(lazy(() => hateoasLinkSchema)))],
    allocableToIrr: ['allocableToIRR', optional(number())],
    firstYearOfRoth: ['firstYearOfRoth', optional(number())],
    recipientAccountNumber: ['recipientAccountNumber', optional(string())],
    grossDistribution: ['grossDistribution', optional(number())],
    taxableAmount: ['taxableAmount', optional(number())],
    taxableAmountNotDetermined: [
      'taxableAmountNotDetermined',
      optional(boolean()),
    ],
    totalDistribution: ['totalDistribution', optional(boolean())],
    capitalGain: ['capitalGain', optional(number())],
    federalTaxWithheld: ['federalTaxWithheld', optional(number())],
    employeeContributions: ['employeeContributions', optional(number())],
    netUnrealizedAppreciation: [
      'netUnrealizedAppreciation',
      optional(number()),
    ],
    distributionCodes: ['distributionCodes', optional(array(string()))],
    iraSepSimple: ['iraSepSimple', optional(boolean())],
    otherAmount: ['otherAmount', optional(number())],
    otherPercent: ['otherPercent', optional(number())],
    yourPercentOfTotal: ['yourPercentOfTotal', optional(number())],
    totalEmployeeContributions: [
      'totalEmployeeContributions',
      optional(number()),
    ],
    foreignAccountTaxCompliance: [
      'foreignAccountTaxCompliance',
      optional(boolean()),
    ],
    dateOfPayment: ['dateOfPayment', optional(string())],
    stateAndLocal: [
      'stateAndLocal',
      optional(array(lazy(() => stateAndLocalTaxWithholdingSchema))),
    ],
  },
  'additionalProperties',
  optional(unknown())
);
